#+TITLE: Section 3.2
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section32 :eval never-export :exports code :results none :tangle ../sage/section3.2.sage :dir ../sage

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  ; (setq org-latex-title-command (concat "\\chapter{%t}\n"))
#+end_src


* Poisson Brackets


** Standard imports


#+attr_latex: :options label=../sage/utils3.2.sage
#+begin_src sage :tangle ../sage/utils3.2.sage
load("utils3.1.sage")
#+end_src

#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage
load("utils3.2.sage")

t = var("t", domain="real")
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src


** The Poisson Bracket


This is the Poisson bracket.
#+attr_latex: :options label=../sage/utils3.2.sage
#+begin_src sage :tangle ../sage/utils3.2.sage
@Func
def Poisson_bracket(F, G):
    def f(state):
        left = (partial(F, 1) * compose(transpose, partial(G, 2)))(state)
        right = (partial(F, 2) * compose(transpose, partial(G, 1)))(state)
        return (left - right).simplify_full()

    return f
#+end_src

We can make general state functions like so.
#+attr_latex: :options label=../sage/utils3.2.sage
#+begin_src sage :tangle ../sage/utils3.2.sage
@Func
def state_function(name):
    return lambda H_state: function(name)(
        time(H_state), *coordinate(H_state).list(), *momentum(H_state).list()
    )
#+end_src

The first test is to see whether $\{Q, H\} = \partial_{2} H$ and $\{P, H\} = -\partial_{1} H$, where $Q$ and $P$ are the coordinate and momentum selectors, and $H$ is a general state function.

#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
q = column_matrix([var("q_x"), var("q_y")])
p = row_matrix([var("p_x"), var("p_y")])
sigma = up(t, q, p)
H = state_function("H")

show(Poisson_bracket(coordinate, H)(sigma))
show(Poisson_bracket(momentum, H)(sigma))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\frac{\partial}{\partial p_{x}}H\left(t, q_{x}, q_{y}, p_{x}, p_{y}\right) \\
\frac{\partial}{\partial p_{y}}H\left(t, q_{x}, q_{y}, p_{x}, p_{y}\right)
\end{array}\right]
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{c}
-\frac{\partial}{\partial q_{x}}H\left(t, q_{x}, q_{y}, p_{x}, p_{y}\right) \\
-\frac{\partial}{\partial q_{y}}H\left(t, q_{x}, q_{y}, p_{x}, p_{y}\right)
\end{array}\right]
\end{dmath*}
#+end_export

All is correct. Note that both results are standing vectors.

** Properties of the Poisson bracket

We know that $\{H, H\} = 0$ for any function.
Let's test this for our implementation.

#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
show(Poisson_bracket(H, H)(sigma))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
0
\end{array}\right]
\end{dmath*}
#+end_export


The property $\{F, F\} = 0$ is actually implied when we can show that the Poisson bracket is anti-symmetric.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
F = state_function("F")
G = state_function("G")

show((Poisson_bracket(F, G) + Poisson_bracket(G, F))(sigma))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
0
\end{array}\right]
\end{dmath*}
#+end_export


How about $\{F, G+H\} = \{F, G\} + \{F, H\}$?
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
show(
    (
        Poisson_bracket(F, G + H)
        - Poisson_bracket(F, G)
        - Poisson_bracket(F, H)
    )(sigma)
)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
0
\end{array}\right]
\end{dmath*}
#+end_export

To check the rule $\{F, c G\} = c\{F, G\}$ we need a constant function.
By making the next ~function~ independent of any argument, it becomes constant.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage
constant = Function(lambda H_state: function("c")())
#+end_src

Is it indeed constant?
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
show(Jacobian(constant)(sigma, sigma))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{ccccc}
0 & 0 & 0 & 0 & 0
\end{array}\right]
\end{dmath*}
#+end_export

So, next we can check $\{F, cG\} = c \{F, G\}$.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
show(
    (Poisson_bracket(F, constant * G) - constant * Poisson_bracket(F, G))(
        sigma
    ).simplify_full()
)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
0
\end{array}\right]
\end{dmath*}
#+end_export

Finally, here is the check on Jacobi's identity.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
jacobi = (
    Poisson_bracket(F, Poisson_bracket(G, H))
    + Poisson_bracket(G, Poisson_bracket(H, F))
    + Poisson_bracket(H, Poisson_bracket(F, G))
)

show(jacobi(sigma).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
0
\end{array}\right]
\end{dmath*}
#+end_export

** Poisson bracket of a conserved quantity

To check that the Poisson bracket of a conserved quantity is conserved we need a function that does not depend on time.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage
def f(H_state):
    return function("f")(
        *coordinate(H_state).list(), *momentum(H_state).list()
    )
#+end_src

Clearly, the derivative with respect to time of this function is zero, so it does what we need.

#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
show(diff(f(sigma), time(sigma)))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
0
\end{dmath*}
#+end_export

Now consider $\{F, H\}$ where $H$ is the rectangular Hamiltonian.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage
V = Function(lambda q: function("V")(*q.list()))

var(m, domain="positive")

H = H_rectangular(m, V)
#+end_src

I compute the Poisson bracket of $F$ and $H$ for one dimension so that the result remains small.
#+attr_latex: :options label=../sage/section3.2.sage
#+begin_src sage :exports both :results replace latex
q = column_matrix([var("q")])
p = row_matrix([var("p")])
sigma = up(t, q, p)

show(Poisson_bracket(f, H)(sigma).expand())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
-\frac{\partial}{\partial q}V\left(q\right) \frac{\partial}{\partial p}f\left(q, p\right) + \frac{p \frac{\partial}{\partial q}f\left(q, p\right)}{m}
\end{array}\right]
\end{dmath*}
#+end_export

To complete the check, note that, by Hamilton's equation,  $\dot q = \partial H/ \partial p$, $\dot p = - \partial H/ \partial q = - \partial V/\partial q$.
If we replace that in the above equation we obtain
\begin{align*}
\dot p \frac{\partial f}{\partial p} + \dot q \frac{\partial f}{\partial q} = \frac{\d f}{\d t}.
\end{align*}
Since $f$ is conserved, the total time derivative of $F$ is zero, hence $f$ and $H$ commute.
