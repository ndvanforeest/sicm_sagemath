#+TITLE: Section 6.4
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section64 :eval never-export :exports code :results none :tangle ../sage/section6.4.sage :dir ../sage/


* Lie Series


** The standard imports.
#+attr_latex: :options label=../sage/utils6.4.sage
#+begin_src sage :tangle ../sage/utils6.4.sage
load("utils3.2.sage")
#+end_src

#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage
load("utils6.4.sage")

var("t", domain="real")
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src

** Taylor expansions

We follow the examples of the book on the Taylor series.

#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
f = function("f")
show(taylor(f(x), x, 0, 4))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{24} \, x^{4} \mathrm{D}_{0, 0, 0, 0}\left(f\right)\left(0\right) + \frac{1}{6} \, x^{3} \mathrm{D}_{0, 0, 0}\left(f\right)\left(0\right) + \frac{1}{2} \, x^{2} \mathrm{D}_{0, 0}\left(f\right)\left(0\right) + x \mathrm{D}_{0}\left(f\right)\left(0\right) + f\left(0\right)
\end{dmath*}
#+end_export


#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
f = sin
show(taylor(f(x), x, 0, 6))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{120} \, x^{5} - \frac{1}{6} \, x^{3} + x
\end{dmath*}
#+end_export

Calling ~taylor~ on ~f(x=x)~ is wrong because ~f(x=x)~ tries to evaluate ~f~ at ~x = x~.
Instead, ~f~ should be treated as a symbolic function.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code :tangle no :eval never
taylor(f(x=x), x, 0, 6) # does not work
#+end_src

When using ~lambda~, we should put it in brackets and apply it to a variable like ~x~
Therefore the first line does not work.
#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
# show(taylor(lambda x: sqrt(1 + x), x, 0, 6))  # this does not work
show(taylor((lambda x: sqrt(1 + x))(x), x, 0, 6))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
-\frac{21}{1024} \, x^{6} + \frac{7}{256} \, x^{5} - \frac{5}{128} \, x^{4} + \frac{1}{16} \, x^{3} - \frac{1}{8} \, x^{2} + \frac{1}{2} \, x + 1
\end{dmath*}
#+end_export

Here is Exercise 6.7
#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
n = var("n", domain="integer")
f = lambda x: (1 + x) ^ n
show(taylor(f(x), x, 0, 7))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{5040} \, {\left(n^{7} - 21 \, n^{6} + 175 \, n^{5} - 735 \, n^{4} + 1624 \, n^{3} - 1764 \, n^{2} + 720 \, n\right)} x^{7} + \frac{1}{720} \, {\left(n^{6} - 15 \, n^{5} + 85 \, n^{4} - 225 \, n^{3} + 274 \, n^{2} - 120 \, n\right)} x^{6} + \frac{1}{120} \, {\left(n^{5} - 10 \, n^{4} + 35 \, n^{3} - 50 \, n^{2} + 24 \, n\right)} x^{5} + \frac{1}{24} \, {\left(n^{4} - 6 \, n^{3} + 11 \, n^{2} - 6 \, n\right)} x^{4} + \frac{1}{6} \, {\left(n^{3} - 3 \, n^{2} + 2 \, n\right)} x^{3} + \frac{1}{2} \, {\left(n^{2} - n\right)} x^{2} + n x + 1
\end{dmath*}
#+end_export



** Computing Lie Series

The Lie derivative is straightforward to build. We decorate it with ~@Func~ so that we can use it in algebraic equations.

#+attr_latex: :options label=../sage/utils6.4.sage
#+begin_src sage :tangle ../sage/utils6.4.sage
@Func
def Lie_derivative(H):
    def f(F):
        return Poisson_bracket(F, H)

    return f
#+end_src

Before tring our hands on the Lie transform, we consider a few examples of the Lie derivative.
#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage
_ = var("m k", domain="positive")


def H_harmonic(m, k):
    def f(state):
        return (
            square(momentum(state)) / (2 * m)
            + k * square(coordinate(state)) / 2
        )

    return f

H = H_harmonic(m, k)
#+end_src

#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
x0, p0 = var("x0 p0", domain="real")
state = up(t, column_matrix([x0]), row_matrix([p0]))
lie = Lie_derivative(H)
show(lie(coordinate)(state))
show(lie(lie(coordinate))(state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\frac{p_{0}}{m}
\end{array}\right]
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{c}
-\frac{k x_{0}}{m}
\end{array}\right]
\end{dmath*}
#+end_export

We move on to the Lie transform.
The transform function consumes as arguments a Hamiltonian (for the Lie derivative) and a time $t$.
The returren function, ~outer~, asks for the function $F$ to which to apply the Lie transform.
The nested function ~inner~ requires a state and the order up to which to evaluate first the Lie derivative.
(As the book only uses the series up to some order,  there is no neee to compute $e^{\epsilon L_{H}} F$ first and then take the series approximation for that exponetial.)
#+attr_latex: :options label=../sage/utils6.4.sage
#+begin_src sage :tangle ../sage/utils6.4.sage
def Lie_transform(H, t):
    lie = Lie_derivative(H)

    def outer(func):
        def inner(local, n):
            term = func
            factor = 1
            res = factor * term(local)
            for i in range(1, n + 1):
                term = lie(term)
                factor *= t / i
                res += factor * term(local)
            return res

        return inner

    return outer
#+end_src

We can now move on to the examples of the book.

#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
_ = var('dt', domain="real", latex_name=r"\d t")

show(Lie_transform(H, dt)(coordinate)(state, 4))
show(Lie_transform(H, dt)(momentum)(state, 4))
show(Lie_transform(H, dt)(H)(state, 4))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\frac{{\d t}^{4} k^{2} x_{0}}{24 \, m^{2}} - \frac{{\d t}^{3} k p_{0}}{6 \, m^{2}} - \frac{{\d t}^{2} k x_{0}}{2 \, m} + \frac{{\d t} p_{0}}{m} + x_{0}
\end{array}\right]
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{c}
\frac{{\d t}^{4} k^{2} p_{0}}{24 \, m^{2}} + \frac{{\d t}^{3} k^{2} x_{0}}{6 \, m} - \frac{{\d t}^{2} k p_{0}}{2 \, m} - {\d t} k x_{0} + p_{0}
\end{array}\right]
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{c}
\frac{1}{2} \, k x_{0}^{2} + \frac{p_{0}^{2}}{2 \, m}
\end{array}\right]
\end{dmath*}
#+end_export


The final example is the Hamiltonian for a central potential field, formulated in polar coordinates.
We can build this Hamiltonian from our earlies work, like so.
#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage
def V(q):
    return function("U")(q)

m = var("m", domain="positive")

def H_central_polar(m, V):
    def f(state):
        r, phi = coordinate(state).list()
        p_r, p_phi = momentum(state).list()
        T = 1 / 2 * square(p_r) / m + 1 / 2 * square(p_phi) / (m * square(r))
        return T + V(r)

    return f


H = H_central_polar(m, V)
#+end_src

First two elementary checks on our code.
#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
_ = var("r phi p_r p_phi", domain="real")
assume(r > 0)
q = column_matrix([r, phi])
p = row_matrix([p_r, p_phi])
H_state = up(t, q, p)

show(H(H_state).expand())
show(partial(H, 1)(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{p_{r}^{2}}{2 \, m} + \frac{p_{\phi}^{2}}{2 \, m r^{2}} + U\left(r\right)
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{cc}
-\frac{p_{\phi}^{2}}{m r^{3}} + \frac{\partial}{\partial r}U\left(r\right) & 0
\end{array}\right]
\end{dmath*}
#+end_export

Here is the result; it's the same as in the book.
We unpack the matrix to remove the brackets in the printing.
#+attr_latex: :options label=../sage/section6.4.sage
#+begin_src sage :exports both :results replace latex
res = Lie_transform(H, dt)(coordinate)(H_state, 3).expand()
show(res[0][0])
show(res[1][0])
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
-\frac{{\d t}^{3} p_{r} \frac{\partial^{2}}{(\partial r)^{2}}U\left(r\right)}{6 \, m^{2}} - \frac{{\d t}^{2} \frac{\partial}{\partial r}U\left(r\right)}{2 \, m} + \frac{{\d t} p_{r}}{m} + r - \frac{{\d t}^{3} p_{\phi}^{2} p_{r}}{2 \, m^{3} r^{4}} + \frac{{\d t}^{2} p_{\phi}^{2}}{2 \, m^{2} r^{3}}
\end{dmath*}
\begin{dmath*}
\phi + \frac{{\d t}^{3} p_{\phi} \frac{\partial}{\partial r}U\left(r\right)}{3 \, m^{2} r^{3}} + \frac{{\d t}^{3} p_{\phi} p_{r}^{2}}{m^{3} r^{4}} - \frac{{\d t}^{2} p_{\phi} p_{r}}{m^{2} r^{3}} + \frac{{\d t} p_{\phi}}{m r^{2}} - \frac{{\d t}^{3} p_{\phi}^{3}}{3 \, m^{3} r^{6}}
\end{dmath*}
#+end_export
