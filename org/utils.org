#+TITLE: Basic functions
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session utils :eval never-export :exports code :results none :tangle sage/utils_tests.sage

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  ; (setq org-latex-title-command (concat "\\chapter{%t}\n"))
#+end_src

* Utilities

Here we provide the Python and Sagemath code for the functions that the book does not explain.


** Standard import

We need some standard imports to run the code in the code blocks below.
Since I run the sage scripts on the command line like ~$> sage section1.4.sage~ it appears not to be necessary to import ~sage.all~.

BTW, don't load ~from sage.all import *~ after loading ~utils.sage~, because that will lead to name space conflict with the ~Gamma~ function.

Below I explain why the next files are loaded in this way.
Note that the titles of the  code blocks correspond to the file to which the code is written when tangled.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
import numpy as np
from tuples import up, Tuple # See below why this import.
#+end_src

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports code :results none
load("utils.sage")
#+end_src

#+ATTR_LATEX: :options label=don't tangle
#+begin_src sage :exports code :results none :tangle no
load("show_expression.sage")
#+end_src


** Output to LaTeX


To keep the formulas short in LaTeX, I remove all strings like $(t)$, and replace $\partial x/\partial t$ by $\dot x$.
There is a caveat, though.
When a string is returned, rather than printed, org mode, or Python, adds many escape symbols, thereby ruining the LaTeX output.
For this reason, I call ~print~, which for my purposes (with org mode) works.

#+ATTR_LATEX: :options label=show\_expression.sage
#+begin_src sage :exports code :results none :tangle sage/show_expression.sage
import re
import tuples # see below

def show_expression(s):
    s = latex(s)
    s = re.sub(r"\\frac{\\partial}{\\partial t}", r"\\dot ", s)
    s = re.sub(r"\\left\(t\\right\)", r"", s)
    s = re.sub(
        r"\\frac\{\\partial\^\{2\}\}\{\(\\partial t\)\^\{2\}\}", r"\\ddot ", s
    )
    print(r"\[" + s + r"\]")


# def show_expression(s):
#     return r"\[" + latex(s) + r"\]"
#+end_src

The book uses ~up~ tuples, which I want to be printed vertically.
I guess I should implement the formatting of ~Tuple~ on the ~Tuple~ class, but here I take the lazy route.
#+begin_src sage :exports code :results none :tangle sage/show_expression.sage

def show_tuple(tup):
    res = r"\begin{align*}"
    for component in tup:
        res += "& " + latex(component) + r"\\"
    res += r"\end{align*}"
    return res
#+end_src

There is another subtlety.
When working in sage files, I call ~show(expr)~ to have some expression printed to screen.
In this case, I do /not/ want to see LaTeX output.
However, when executing a code block in org mode, I /do/ want to get LaTeX output, and for this, I could use ~show_expression~ (just like in the book) in the code blocks in the org file.
So far so good, but now comes the subtlety.
When I /tangle/ the code from the org file to a sage file, and I don't want to see ~show_expression~, but just ~show~.
Thus, I should use ~show~ throughout, but in the org mode file, ~show~ should call ~show_expression~.
To achieve this,  I load the file ~show_expression.sage~ /only in the org mode file/ so that ~show~ gets routed to ~show_expression~ in the org file.

#+begin_src sage :exports code :results none :tangle sage/show_expression.sage
def show(s):
    if isinstance(s, tuples.Tuple):
        return show_tuple(s)
    return show_expression(s)
#+end_src

** Literate functions

The function ~literal_function~ will depend /always/ on $t$.
We therefore provide a ~(t)~ after the ~function~.
To print a literal function with LaTeX, I suppress the dependence on $(t)$; the function ~print_lit_to_latex~ achieves this.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
var('t', domain="real")


def literal_function(name):
    return function(name, nargs=1, print_latex_func=print_lit_f_to_latex)(t)


def print_lit_f_to_latex(name, *args):
    return name
#+end_src


** Coordinate paths

We implement a generic coordinate path ~q~ as a ~vector~ whose elements are ~literal_function~s.
Note that a ~vector~ expects expressions as elements; this is another reason to attach ~(t)~ as a argument in definition of ~literal_function~ (without the ~(t)~, literal functions cannot be stored in a vector.)


#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports code :results none
q = vector(
    [
        literal_function("q_x"),
        literal_function("q_y"),
        literal_function("q_z"),
    ]
)
#+end_src

Here is an example to see how to evaluate ~q~.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(q(t=t))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(q_x,\,q_y,\,q_z\right)\]
#+end_export

I discovered it is best not to use ~x~ and ~y~ in the definition of literal functions because the variables ~x~ and ~y~ seem to get overwritten.
Hence, don't do this.

#+ATTR_LATEX: :options label=don't tangle
#+begin_src sage :exports code :eval never :results none :tangle no
# Avoid this use of x and y.
q = vector([literal_function("x"), literal_function("y")])
#+end_src


Sometimes we need to lift a coordinate ~q~ and a velocity vector ~v~ to a /local tuple/.
For this, we use the ~up~ tuple; this makes it easy to stick to the book.
However, we don't build the coordinate path nor the velocity as tuples because I find Sagemath vectors more convenient.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def qv_to_state(q, v):
    return up(t, q, v)
#+end_src


The next function allows us to lift coordinate paths and velocity paths to local tuples paths.
(The idea of returning a function within a function is known as /currying/.)
#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def qv_to_state_path(q, v):
    def f(t):
        return up(t, q(t=t), v(t=t))

    return f
#+end_src

Using a ~vector~ proves handy because Sagemath offers element-wise differentiation of vectors.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(q.diff(t))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\dot q_x,\,\dot q_y,\,\dot q_z\right)\]
#+end_export

Before we can continue with constructing a coordinate path $q(t)$ and its velocity path $\dot q(t)$, we need to figure out how to set up differentiation with Sagemath so that we can follow the notation of the book.
This in turn requires to construct (coordinate) spaces, so this we will do that first.


** Spaces

To use the differentiation functionality of Sagemath, we need variable names, for instance, in the expressions ~f(x).diff(x)~ or ~diff(f(x), x)~ we need to provide an argument such as ~x~.
Now, without a space I don't see a simple way to support in Sagemath the notation of the book like $\partial_{1}L(t, q, p)$, where the $1$ refers to the /slot/ of the arguments of $L$.
So I decided to build a ~space~ that specifies variable names to make up a space.
This brings us to the problem of defining a space.

The next function makes coordinates with a list of given names, for instance ~["\\phi", "\\theta"]~.
Note that these names are used as arguments in ~latex_name~, so we need to include the full LaTeX name, and escape the backslash.
In the name of the Sagemath variable, we strip the backslash.
The velocities follow the same pattern.
As I prefer to read $\dot \phi$ instead of $\partial \phi/\partial t$, I use the dot in the ~latex_name~.
Once all coordinates and velocities are made for the variables in the named list, the next function casts them to vectors and turns them into a local tuple.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def make_named_coordinates(coordinate_names, latex_names=None):
    vars = []
    if latex_names == None:
        latex_names = [name for name in coordinate_names]

    stripped = [f'{name.lstrip(r"\\")}' for name in coordinate_names]
    for name, latex in zip(stripped, latex_names):
        q = var(name, latex_name=f"{latex}", domain='real')
        vars.append(q)
    return vector(vars)


def make_named_velocities(coordinate_names, latex_names=None):
    names = [f"{name}dot" for name in coordinate_names]
    if latex_names == None:
        latex_names = [fr"\dot {name}" for name in coordinate_names]
    return make_named_coordinates(names, latex_names)


#+end_src

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(make_named_coordinates(["q", "r"]))
show(make_named_velocities(["q", "r"]))
show(make_named_coordinates(["\\phi", r"\theta"]))
show(make_named_velocities(["\\phi", r"\theta"]))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left({q},\,{r}\right)\]
\[\left({\dot q},\,{\dot r}\right)\]
\[\left({\phi},\,{\theta}\right)\]
\[\left({\dot \phi},\,{\dot \theta}\right)\]
#+end_export

Sometimes its easier to use variable names with an index, like $x_{1}, x_{2},\ldots$.
With these function we can just provide the symbol and the dimension of the coordinate space.
#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def make_coordinates(coordinate_name, dim):
    names = [f"{coordinate_name}_{i}" for i in range(1, dim + 1)]
    return make_named_coordinates(names)


def make_velocities(coordinate_name, dim):
    names = [f"{coordinate_name}_{i}" for i in range(1, dim + 1)]
    return make_named_velocities(names)
#+end_src

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(make_coordinates("q", dim=3))
show(make_velocities("q", dim=3))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left({q_1},\,{q_2},\,{q_3}\right)\]
\[\left({\dot q_1},\,{\dot q_2},\,{\dot q_3}\right)\]
#+end_export


The book of V.I.
Arnold on classical mechanics provides two ways to define the Lagrangian as a map on a space.
The first is this: \(L: \R\times\R^{n}\times\R^{n} \to \R, (t, q, p) \to L(t, q, p)\).
The other is to define it as a map from the tangent bundle $TM$ of the manifold $M$ on which a system moves.
The potential is then a function from $M$ to $\R$, and the kinetic energy a quadratic form on each tangent space $T_{x}M$.
As the first approach seems the simplest, at least at the moment, we follow this definition.


#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage


def make_named_space(coordinate_names):
    coordinates = make_named_coordinates(coordinate_names)
    velocities = make_named_velocities(coordinate_names)
    return qv_to_state(coordinates, velocities)


def make_space(coordinate_name, dim):
    coordinates = make_coordinates(coordinate_name, dim)
    velocities = make_velocities(coordinate_name, dim)
    return qv_to_state(coordinates, velocities)
#+end_src

The results are printed  vertically because it's an up tuple.

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(make_space("q", dim=2))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{align*} & t \\ & \left({q_1},\,{q_2}\right) \\ & \left({\dot q_1},\,{\dot q_2}\right) \\ \end{align*}
#+end_export

Here is another example.

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
space = make_named_space(["\\phi", "\\theta"])
show(space)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{align*} & t \\ & \left({\phi},\,{\theta}\right) \\ & \left({\dot \phi},\,{\dot \theta}\right) \\ \end{align*}
#+end_export

** Differentiation

Let's start with some basic examples of differentiation to see how things work in Sagemath.
We need some variables to define a function ~F~.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports code :results none
var("a b c x y", domain="real")
#+end_src

We will use quadratic functions often, so let's make a function for this.
#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def square(x):
    return x * x
#+end_src


#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
F = a * square(x) + b * x + c
show(diff(F, x))
show(diff(F, x)(x=0))
show(diff(F, x, 2))
show(diff(F, x, x))
#+end_src

#+RESULTS:
#+begin_export latex
\[2 \, a x + b\]
\[b\]
\[2 \, a\]
\[2 \, a\]
#+end_export


We can ask the argument names of a function, but this is not always helpful.
The intention is to treat ~c~ as a constant, not as an argument of ~F~. So, we need to be careful when using ~args()~.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
M = matrix([[3, 4], [4, 5]])
b = vector([8, 9])
v = vector([x, y])
F = 1 / 2 * v * M * v + b * v + c
show(F.args())
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(c, x, y\right)\]
#+end_export


Here are some ways to compute the gradient of ~F~.

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(jacobian(F, (x, y)))
show(jacobian(F, v))
show(jacobian(F, (x, y))(x=0, y=0))
show(jacobian(F(x=x, y=y), (x, y)))
show(jacobian(F(x=x, y=y), (x, y))(x=0, y=0))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
3 \, x + 4 \, y + 8 & 4 \, x + 5 \, y + 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
3 \, x + 4 \, y + 8 & 4 \, x + 5 \, y + 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
8 & 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
3 \, x + 4 \, y + 8 & 4 \, x + 5 \, y + 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
8 & 9
\end{array}\right)\]
#+end_export

We can find the Hessian by using the ~jacobian~ function twice.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(jacobian(jacobian(F, (x, y)), (x, y)))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
3 & 4 \\
4 & 5
\end{array}\right)\]
#+end_export

We can also define a function in the normal Pythonic way, and take derivatives.
The quoted example does not work because ~F~ does not receive an explicit variable name wrt which to take the derivative.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
def F(v):
    return 1 / 2 * v * M * v + b * v + c

show(jacobian(F(v), (x, y)))
show(jacobian(F(v), v))
# show(jacobian(F, v))  # This does not work
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
3 \, x + 4 \, y + 8 & 4 \, x + 5 \, y + 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
3 \, x + 4 \, y + 8 & 4 \, x + 5 \, y + 9
\end{array}\right)\]
#+end_export


Differentiation of symbolic functions works different from what I expected.
For instance, if ~U = function("U")~, then ~jacobian(U(v), (x, y))~ gives a coercion error.
However, this does work:
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
U = function("U")
show(jacobian(U(*v), (x, y)))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
\frac{\partial}{\partial x}U\left(x, y\right) & \frac{\partial}{\partial y}U\left(x, y\right)
\end{array}\right)\]
#+end_export

So when differentiating a symbolic function, the arguments need to be unpacked with the ~*~ operator.
We can now do two things to get around this problem.
We can protect each function in which we take a derivative by testing whether the given function is a symbolic function or not, and then act accordingly.
Another strategy is to wrap a symbolic function in a python function and then pass an unpacked argument to the symbolic function.
We follow this approach, one reason being that we will not use symbolic functions all that often.
Here is an example to see how this approach works.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
def U(q):
    return function("U")(*q)

show(jacobian(U(v), (x, y)))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
\frac{\partial}{\partial x}U\left(x, y\right) & \frac{\partial}{\partial y}U\left(x, y\right)
\end{array}\right)\]
#+end_export

So now the interface to the ~jacobian~ stays the same, but we have to be careful on how to use the function of which we take the derivative.

** Gradient and Hessian

Next we build the gradient and the Hessian.
We can use Sagemath's ~jacobian~, but as is clear from above, we need to indicate explicitly the variable names with respect to which to differentiate.
An easy solution is to make a space with dummy variable names, and then select the set of variables that correspond to the slot.
We use the length of the function argument to find out the dimension of the coordinate space.
Once we have computed the Jacobian, we replace (by substitution) the dummy variables by their proper names. Finally, as the gradient is a (co-)vector, we cast it to a vector.

To ensure that (numerical) values for the variables are passed on properly, we need unique names for the variables that make up the space.
Therefore we use ~id(F)~ in the variable names. As these are internal names, the actual variable names are irrelevant; as long as they are unique, it's OK.


#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def gradient(F, v):
    cds = make_coordinates(f"q_{id(F)}", dim=len(v))
    deriv = jacobian(F(cds), cds)
    return vector(deriv.subs(dict(zip(cds, v))))
#+end_src

Here is the version that handles differentiation of symbolic functions explicitly, but we will not use it.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports code :results none
def gradient(F, v):
    cds = make_coordinates(f"qq_{id(F)}", dim=len(v))
    if isinstance(F, sage.symbolic.function_factory.SymbolicFunction):
        deriv = jacobian(F(*cds), cds)  # Unpack coordinates if F is symbolic
    else:
        deriv = jacobian(F(cds), cds)  # Otherwise, call F with a vector
    return deriv.subs(dict(zip(cds, v)))
#+end_src


#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(gradient(F, v))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
3 \, x + 4 \, y + 8 & 4 \, x + 5 \, y + 9
\end{array}\right)\]
#+end_export

Let's substitute some values.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(gradient(F, v)(x=0, y=0))
show(gradient(F, v).subs({v[0]: 0, v[1]: 0}))
show(gradient(F, [0, 0]))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
8 & 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
8 & 9
\end{array}\right)\]
\[\left(\begin{array}{rr}
8 & 9
\end{array}\right)\]
#+end_export

Sometimes we want to take the gradient of ~F~ and use a path as argument.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
q = vector([literal_function("q_1"), literal_function("q_2")])
show(gradient(F, q))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
3 \, q_1 + 4 \, q_2 + 8 & 4 \, q_1 + 5 \, q_2 + 9
\end{array}\right)\]
#+end_export

Note that the dependence on ~t~ is suppressed in the LaTeX   output.

To apply the gradient to symbolic functions, we wrap it in a Python function and do the unpacking of the arguments in the function body.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
def U(q):
    return function("U")(*q)

show(gradient(U, q))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
\mathrm{D}_{0}\left(U\right)\left(q_1, q_2\right) & \mathrm{D}_{1}\left(U\right)\left(q_1, q_2\right)
\end{array}\right)\]
#+end_export


This is the Hessian.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def hessian(F, v):
    cds = make_coordinates(f"q_{id(F)}", dim=len(v))
    hes = jacobian(jacobian(F(cds), cds), cds)
    return matrix(hes.subs(dict(zip(cds, v))))
#+end_src

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(hessian(F, q))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
3 & 4 \\
4 & 5
\end{array}\right)\]
#+end_export



#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
def U(q):
    return function("U")(*q)

show(hessian(U, q))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
\mathrm{D}_{0, 0}\left(U\right)\left(q_1, q_2\right) & \mathrm{D}_{0, 1}\left(U\right)\left(q_1, q_2\right) \\
\mathrm{D}_{0, 1}\left(U\right)\left(q_1, q_2\right) & \mathrm{D}_{1, 1}\left(U\right)\left(q_1, q_2\right)
\end{array}\right)\]
#+end_export


** Differentiation with respect to slots

To follow the notation of the book, we need to define a python function that computes partial derivatives with respect to the slot of a function; for example, in $\partial_1 L$ the ~1~ indicates that the partial derivatives are supposed to be taken wrt the coordinate variables.
The examples above show us how to approach this problem.

The function ~partial~ can be called recursively.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def partial(f, slot):
    def wrapper(local):
        space = make_space(f"q_{id(f)}_{slot}", dim=len(coordinate(local)))
        if slot == 0:
            selection = [time(space)]
        elif slot == 1:
            selection = coordinate(space)
        elif slot == 2:
            selection = velocity(space)
        deriv = jacobian(f(space), selection)
        return deriv.subs(
            {
                t: time(local),
                **dict(zip(coordinate(space), coordinate(local))),
                **dict(zip(velocity(space), velocity(local))),
            }
        )

    return wrapper
#+end_src

Here are some applications.

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports code :results none
def L_harmonic(m, k):
    def Lagrangian(local):
        q = coordinate(local)
        v = velocity(local)
        return (1 / 2) * m * square(v) - (1 / 2) * k * square(q)

    return Lagrangian


var('k m', domain="positive")
L = L_harmonic(m, k)
#+end_src

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
space = make_space("x", dim=2)
show(space)
show(partial(L, 1)(space))
show(partial(L, 2)(space))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{align*} & t \\ & \left({x_1},\,{x_2}\right) \\ & \left({\dot x_1},\,{\dot x_2}\right) \\ \end{align*}
\[\left(\begin{array}{rr}
-k {x_1} & -k {x_2}
\end{array}\right)\]
\[\left(\begin{array}{rr}
m {\dot x_1} & m {\dot x_2}
\end{array}\right)\]
#+end_export

What happens if we use a symbolic potential function ~U~?
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports code :results none
def L_generic(m, U):
    def Lagrangian(local):
        q = coordinate(local)
        v = velocity(local)
        return (1 / 2) * m * square(v) - U(q)

    return Lagrangian
#+end_src


#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
def U(q):
    return function("U")(*q)


L_gen = L_generic(m, U)
show(partial(L_gen, 1)(space))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
-\frac{\partial}{\partial {x_1}}U\left({x_1}, {x_2}\right) & -\frac{\partial}{\partial {x_2}}U\left({x_1}, {x_2}\right)
\end{array}\right)\]
#+end_export

If we want to substitute a path, we use the function ~Gamma~ that we build below.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
q = vector([literal_function("q_1"), literal_function("q_2")])
show(partial(L, 1)(Gamma(q)(t)))
show(partial(L_gen, 1)(Gamma(q)(t)))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\begin{array}{rr}
-k q_1 & -k q_2
\end{array}\right)\]
\[\left(\begin{array}{rr}
-\mathrm{D}_{0}\left(U\right)\left(q_1, q_2\right) & -\mathrm{D}_{1}\left(U\right)\left(q_1, q_2\right)
\end{array}\right)\]
#+end_export

Later we want to apply differentiation with respect to $t$ to more general objects.
As ~diff~ does not always seem work (to matrices for instance), we use ~derivative~ for the definition of the operator ~D~.
We need to implement differentiation of local tuples.
Here I take a lazy route, by not deferring this to the ~Tuple~ class.
This works as long as our up tuples will only consist of a time, a coordinate vector, and velocity vector.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def D(expr):
    "Derivative wrt time t."
    if isinstance(expr, Tuple):
        return up(
            D(time(expr)),
            D(coordinate(expr)),
            D(velocity(expr)),
        )
    return derivative(expr, t)
#+end_src


Here is an example.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(D(q))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\dot q_1,\,\dot q_2\right)\]
#+end_export


** Sums, products and composition of functions

We want to support the summation, products and composition of functions:
\begin{align*}
(f+g)(x) &= f(x) + g(x), \\
(fg)(x) &= f(x)g(x), \\
(f \circ g)(x) &= f(g(x).
\end{align*}
With recursion, this is easy to code.
I use ~Sum~ rather than ~sum~ because the latter is a built-in function of Python. For consistency, I defined ~Product~, ~Compose~, and ~Min~ also with a capital.


#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def Sum(*funcs):
    if len(funcs) == 1:
        return lambda x: funcs[0](x)
    return lambda x: funcs[0](x) + Sum(*funcs[1:])(x)


def Product(*funcs):
    if len(funcs) == 1:
        return lambda x: funcs[0](x)
    return lambda x: funcs[0](x) * Product(*funcs[1:])(x)


def Compose(*funcs):
    if len(funcs) == 1:
        return lambda x: funcs[0](x)
    return lambda x: funcs[0](Compose(*funcs[1:])(x))


def Min(func):
    return lambda x: -func(x)
#+end_src

Here is how this works on general functions.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
f = function('f')
g = function('g')
h = function('h')

show(Sum(f, g, h)(x))
show(Product(f, g, h)(x))
show(Compose(f, g, h)(x))
show(diff(Sum(f, g, h)(x), x))
show(diff(Product(f, g, h)(x), x))
show(diff(Compose(f, g, h)(x), x))
#+end_src

#+RESULTS:
#+begin_export latex
\[f\left(x\right) + g\left(x\right) + h\left(x\right)\]
\[f\left(x\right) g\left(x\right) h\left(x\right)\]
\[f\left(g\left(h\left(x\right)\right)\right)\]
\[\frac{\partial}{\partial x}f\left(x\right) + \frac{\partial}{\partial x}g\left(x\right) + \frac{\partial}{\partial x}h\left(x\right)\]
\[g\left(x\right) h\left(x\right) \frac{\partial}{\partial x}f\left(x\right) + f\left(x\right) h\left(x\right) \frac{\partial}{\partial x}g\left(x\right) + f\left(x\right) g\left(x\right) \frac{\partial}{\partial x}h\left(x\right)\]
\[\mathrm{D}_{0}\left(f\right)\left(g\left(h\left(x\right)\right)\right) \mathrm{D}_{0}\left(g\right)\left(h\left(x\right)\right) \frac{\partial}{\partial x}h\left(x\right)\]
#+end_export

And some concrete examples.
#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
f = lambda x: sin(x)
g = lambda x: x ^ 2 + 1
h = lambda x: 3 * x


show(Sum(f, g, h)(x))
show(Product(f, g, h)(x))
show(Compose(f, g, h)(x))
show(diff(Sum(f, g, h)(x), x))
show(diff(Product(f, g, h)(x), x))
show(diff(Compose(f, g, h)(x), x))
#+end_src

#+RESULTS:
#+begin_export latex
\[x^{2} + 3 \, x + \sin\left(x\right) + 1\]
\[3 \, {\left(x^{2} + 1\right)} x \sin\left(x\right)\]
\[\sin\left(9 \, x^{2} + 1\right)\]
\[2 \, x + \cos\left(x\right) + 3\]
\[3 \, {\left(x^{2} + 1\right)} x \cos\left(x\right) + 6 \, x^{2} \sin\left(x\right) + 3 \, {\left(x^{2} + 1\right)} \sin\left(x\right)\]
\[18 \, x \cos\left(9 \, x^{2} + 1\right)\]
#+end_export




** Local tuples and paths

The function ~Gamma~ lifts the coordinate path ~q~ to a /local tuple/.

There is a subtlety here.

In numerical work, the ~vector q~ can be implicitly converted to a numpy array whose elements still may depend on the variable $t$.

As a numpy array cannot be differentiated, we  cast ~q~ to a vector, so that we can apply ~D~ again.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def Gamma(q):
    q = vector(q)
    v = D(q)
    return qv_to_state_path(q, v)
#+end_src

When applying to a path, we get this.

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(Gamma(q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{align*} & t \\ & \left(q_1,\,q_2\right) \\ & \left(\frac{\partial}{\partial t}q_1,\,\frac{\partial}{\partial t}q_2\right) \\ \end{align*}
#+end_export

Finally, here are the projections from  $\Gamma$ to its components.
#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def time(local):
    return local[0]

def coordinate(local):
    return local[1]

def velocity(local):
    return local[2]
#+end_src

#+ATTR_LATEX: :options label=utils\_tests.sage
#+begin_src sage :exports both :results replace latex
show(velocity(Gamma(q)(t)))
#+end_src

#+RESULTS:
#+begin_export latex
\[\left(\dot q_1,\,\dot q_2\right)\]
#+end_export


** Rotations

At some point in the book we need to rotate around a given axis in 3D space.
ChatGPT gave me the code right away.

#+ATTR_LATEX: :options label=utils.sage
#+begin_src sage :exports code :results none :tangle sage/utils.sage
def rotation_matrix(axis, theta):
    """
    Return the 3x3 rotation matrix for a rotation of angle theta (in radians)
    about the given axis. The axis is specified as an iterable of 3 numbers.
    """
    # Convert the axis to a normalized vector
    axis = vector(axis).normalized()
    x, y, z = axis
    c = cos(theta)
    s = sin(theta)
    t = 1 - c  # common factor

    # Construct the rotation matrix using Rodrigues' formula
    R = matrix(
        [
            [c + x**2 * t, x * y * t - z * s, x * z * t + y * s],
            [y * x * t + z * s, c + y**2 * t, y * z * t - x * s],
            [z * x * t - y * s, z * y * t + x * s, c + z**2 * t],
        ]
    )
    return R
#+end_src
