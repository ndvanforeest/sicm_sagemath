#+TITLE: Section 5.1
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section51 :eval never-export :exports code :results none :tangle ../sage/section5.1.sage :dir ../sage


* Point Transformations


** The standard imports.

#+attr_latex: :options label=../sage/utils5.1.sage
#+begin_src sage :tangle ../sage/utils5.1.sage
load("utils3.1.sage")
#+end_src

#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage
load("utils5.1.sage")

t = var("t", domain="real")
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src

** Implementing point transformations

#+attr_latex: :options label=../sage/utils5.1.sage
#+begin_src sage :tangle ../sage/utils5.1.sage
def F_to_CH(F):
    M = partial(F, 1)

    def f(state):
        return up(time(state), F(state), M(state).solve_left(momentum(state)))

    return f
#+end_src

Let's test this function.
#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage
var("r, phi, p_r, p_phi", domain="real")
assume(r > 0)

q = column_matrix([r, phi])
p = row_matrix([p_r, p_phi])
state = up(t, q, p)
#+end_src

#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage :exports both :results replace latex
show((F_to_CH(p_to_r))(state)[0].simplify_full())
show((F_to_CH(p_to_r))(state)[1].simplify_full())
show((F_to_CH(p_to_r))(state)[2].simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
t
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{c}
r \cos\left(\phi\right) \\
r \sin\left(\phi\right)
\end{array}\right]
\end{dmath*}
\begin{dmath*}
\left[\begin{array}{cc}
\frac{p_{r} r \cos\left(\phi\right) - p_{\phi} \sin\left(\phi\right)}{r} & \frac{p_{r} r \sin\left(\phi\right) + p_{\phi} \cos\left(\phi\right)}{r}
\end{array}\right]
\end{dmath*}
#+end_export

The central Hamiltonian in rectangular coordinates.
#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage
def H_central(m, V):
    def f(state):
        x, p = coordinate(state), momentum(state)
        return square(p) / (2 * m) + V(sqrt(square(x)))

    return f

var("m", domain="positive")
#+end_src

Now we convert it to polar coordinates.
#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage
#+end_src

#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage :exports both :results replace latex
show(
    compose(H_central(m, function("V")), (F_to_CH(p_to_r)))(state)
    .simplify_full()
    .expand()
)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{p_{r}^{2}}{2 \, m} + \frac{p_{\phi}^{2}}{2 \, m r^{2}} + V\left(r\right)
\end{dmath*}
#+end_export

The correction term for time dependent Hamiltonians.
#+attr_latex: :options label=../sage/utils5.1.sage
#+begin_src sage :tangle ../sage/utils5.1.sage
def F_to_K(F):
    M = partial(F, 1)

    def f(state):
        p = M(state).solve_left(momentum(state))
        return -p * partial(F, 0)(state)

    return f
#+end_src

We apply this to a 2D translation.
#+attr_latex: :options label=../sage/utils5.1.sage
#+begin_src sage :tangle ../sage/utils5.1.sage
def translating(v):
    def f(state):
        return coordinate(state) + v * time(state)

    return f
#+end_src

#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage
var("q_x q_y v_x v_y p_x p_y", domain="real")
q = column_matrix([q_x, q_y])
v = column_matrix([v_x, v_y])
p = row_matrix([p_x, p_y])
state = up(t, q, p)
#+end_src

#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage :exports both :results replace latex
show(F_to_K(translating(v))(state)[0, 0])
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
-p_{x} v_{x} - p_{y} v_{y}
\end{dmath*}
#+end_export

Finally, we transform the Hamiltonian of a particle not subject to forces due to a potential field.
#+attr_latex: :options label=../sage/section5.1.sage
#+begin_src sage :exports both :results replace latex
def H_free(m):
    def f(state):
        return square(momentum(state)) / (2 * m)

    return f


def H_prime():
    return compose(H_free(m), F_to_CH(translating(v))) + F_to_K(translating(v))



show(H_prime()(state)[0, 0])
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
-p_{x} v_{x} - p_{y} v_{y} + \frac{p_{x}^{2} + p_{y}^{2}}{2 \, m}
\end{dmath*}
#+end_export
