#+TITLE: Section 1.6
#+AUTHOR: Nicky
#+date: <2025-05-09 Fri>

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section16 :eval never-export :exports code :results none :tangle ../sage/section1.6.sage :dir ../sage/

*  How to find Lagrangians

** Standard imports

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
load("utils1.5.sage")
#+end_src

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :tangle ../sage/section1.6.sage
load("utils1.6.sage")
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both  :tangle no
load("show_expression.sage")
#+end_src


** Constant acceleration

We start with a point in a uniform gravitational field.
#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
var("t", domain="real")
var("g m", domain="positive")


def L_uniform_acceleration(m, g):
    def Lagrangian(local):
        x, y  = coordinate(local).list()
        v = velocity(local)
        T = 1 / 2 * m * square(v)
        V = m * g * y
        return T - V

    return Lagrangian
#+end_src

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
q = column_path([literal_function("x"), literal_function("y")])
l_eq = Lagrange_equations(L_uniform_acceleration(m, g))(q)
show(l_eq(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
m \ddot x & g m + m \ddot y
\end{array}\right]
\end{dmath*}
#+end_export

**  Central force field

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def L_central_rectangular(m, U):
    def Lagrangian(local):
        q = coordinate(local)
        v = velocity(local)
        T = 1 / 2 * m * square(v)
        return T - U(sqrt(square(q)))

    return Lagrangian
#+end_src

Let us first try this on a concrete potential function.
#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage
def U(r):
    return 1 / r
#+end_src

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
show(Lagrange_equations(L_central_rectangular(m, U))(q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
m \ddot x - \frac{x}{{\left(x^{2} + y^{2}\right)}^{\frac{3}{2}}} & m \ddot y - \frac{y}{{\left(x^{2} + y^{2}\right)}^{\frac{3}{2}}}
\end{array}\right]
\end{dmath*}
#+end_export

Now we  try it on a general central potential.
#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
U = Function(lambda x: function("U")(x))
show(Lagrange_equations(L_central_rectangular(m, U))(q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
m \ddot x + \frac{x \mathrm{D}_{0}\left(U\right)\left(\sqrt{x^{2} + y^{2}}\right)}{\sqrt{x^{2} + y^{2}}} & m \ddot y + \frac{y \mathrm{D}_{0}\left(U\right)\left(\sqrt{x^{2} + y^{2}}\right)}{\sqrt{x^{2} + y^{2}}}
\end{array}\right]
\end{dmath*}
#+end_export



** Coordinate transformations

To get things straight: the function $F$ is the transformation of the coordinates $x'$ to $x$, i.e., $x = F(t, x')$.
The function $C$ lifts the transformation $F$ to the phase space, so it transforms $\Gamma(q')$ to $\Gamma(q)$.

The result of $\partial_1 F v$ is a vector, because $v$ is a vector.
We have to cast $\partial_0 F$ into a vector to enable the summation of these two terms.

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def F_to_C(F):
    def f(local):
        return up(
            time(local),
            F(local),
            partial(F, 0)(local) + partial(F, 1)(local) * velocity(local),
        )

    return f
#+end_src


** polar coordinates

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def p_to_r(local):
    r, phi = coordinate(local).list()
    return column_matrix([r * cos(phi), r * sin(phi)])
#+end_src

We apply ~F_to_C~ and ~p_to_r~ to several examples, to test and to understand how they collaborate.
We need to make the appropriate variables for the space in terms of $r$ and $\phi$.
#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
r = literal_function("r")
phi = literal_function("phi")
q = column_path([r, phi])
show(p_to_r(Gamma(q)(t)))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\cos\left(\phi\right) r \\
r \sin\left(\phi\right)
\end{array}\right]
\end{dmath*}
#+end_export

This is the derivative wrt $t$.
As the transformation ~p_to_r~ does not depend explicitly on $t$, the result should be a column matrix of zeros.

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
show((partial(p_to_r, 0)(Gamma(q)(t))))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
0 \\
0
\end{array}\right]
\end{dmath*}
#+end_export

Next is the derivative wrt $r$ and $\phi$.
#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
show((partial(p_to_r, 1)(Gamma(q)(t))))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
\cos\left(\phi\right) & -r \sin\left(\phi\right) \\
\sin\left(\phi\right) & \cos\left(\phi\right) r
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
show(F_to_C(p_to_r)(Gamma(q)(t)))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} t \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
\cos\left(\phi\right) r \\
r \sin\left(\phi\right)
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
-r \sin\left(\phi\right) \dot \phi + \cos\left(\phi\right) \dot r \\
\cos\left(\phi\right) r \dot \phi + \sin\left(\phi\right) \dot r
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export


We can see what happens for the Lagrangian for the central force in polar coordinates.
#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def L_central_polar(m, U):
    def Lagrangian(local):
        return compose(L_central_rectangular(m, U), F_to_C(p_to_r))(local)

    return Lagrangian
#+end_src

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
# show(L_central_polar(m, U)(Gamma(q)(t)))
show(L_central_polar(m, U)(Gamma(q)(t)).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, m r^{2} \dot \phi^{2} + \frac{1}{2} \, m \dot r^{2} - U\left(\sqrt{r^{2}}\right)
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
expr = Lagrange_equations(L_central_polar(m, U))(q)(t)
show(expr.simplify_full().expand())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
-m r \dot \phi^{2} + m \ddot r + \frac{r \mathrm{D}_{0}\left(U\right)\left(\sqrt{r^{2}}\right)}{\sqrt{r^{2}}} & m r^{2} \ddot \phi + 2 \, m r \dot \phi \dot r
\end{array}\right]
\end{dmath*}
#+end_export


** Coriolis and centrifugal forces

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def L_free_rectangular(m):
    def Lagrangian(local):
        v = velocity(local)
        return 1 / 2 * m * square(v)

    return Lagrangian


def L_free_polar(m):
    def Lagrangian(local):
        return L_free_rectangular(m)(F_to_C(p_to_r)(local))

    return Lagrangian


def F(Omega):
    def f(local):
        t = time(local)
        r, theta = coordinate(local).list()
        return vector([r, theta + Omega * t])

    return f


def L_rotating_polar(m, Omega):
    def Lagrangian(local):
        return L_free_polar(m)(F_to_C(F(Omega))(local))

    return Lagrangian



def r_to_p(local):
    x, y = coordinate(local).list()
    return column_matrix([sqrt(x * x + y * y), atan(y / x)])


def L_rotating_rectangular(m, Omega):
    def Lagrangian(local):
        return L_rotating_polar(m, Omega)(F_to_C(r_to_p)(local))

    return Lagrangian
#+end_src


#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage
_ = var("Omega", domain="positive")
q_xy = column_path([literal_function("x"), literal_function("y")])
expr = L_rotating_rectangular(m, Omega)(Gamma(q_xy)(t)).simplify_full()
#+end_src

#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
show(expr)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, \Omega^{2} m x^{2} + \frac{1}{2} \, \Omega^{2} m y^{2} - \Omega m y \dot x + \Omega m x \dot y + \frac{1}{2} \, m \dot x^{2} + \frac{1}{2} \, m \dot y^{2}
\end{dmath*}
#+end_export


The simplification of the Lagrange equations takes some time.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :eval never :tangle no
expr = Lagrange_equations(L_rotating_rectangular(m, Omega))(q)(t)
show(expr.simplify_full())
#+end_src

I edited the result a bit by hand.

\begin{align*}
- m \Omega^2  x - 2 m \Omega \dot y  + m \ddot x, & - m \Omega^2  y + 2 m \Omega  \dot x + m \ddot y.
\end{align*}




** Constraints, a driven pendulum

Rather than implementation the formulas of the book at this place, we follow the idea they explain at bit later in the book: formulate a Lagrangian in practical coordinates, then formulate the problem in practical coordinates /for that problem/, and then use a coordinate transformation from the problem's coordinates to the Lagrangian coordinates.

For the driven pendulum, the Lagrangian is easiest to express in terms of $x$ and $y$ coordinates, while the pendulum needs an angle $\theta$.
So, we need a transformation from $\theta$ to $x$ and $y$.
Note that the function ~coordinate~ returns a $(1\times 1)$ column matrix which just contains $\theta$.
So, we have to pick element $(0,0)$.
Another point is that here ~ys~ needs to be evaluated at ~t~; in the other functions ~ys~ is just passed on as a function.

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def dp_coordinates(l, ys):
    "From theta to x, y coordinates."
    def f(local):
        t = time(local)
        theta = coordinate(local)[0, 0]
        return column_matrix([l * sin(theta), ys(t) - l * cos(theta)])

    return f
#+end_src

#+attr_latex: :options label=../sage/utils1.6.sage
#+begin_src sage :tangle ../sage/utils1.6.sage
def L_pend(m, l, g, ys):
    def Lagrangian(local):
        return L_uniform_acceleration(m, g)(
            F_to_C(dp_coordinates(l, ys))(local)
        )

    return Lagrangian
#+end_src


#+attr_latex: :options label=../sage/section1.6.sage
#+begin_src sage :exports both :results replace latex
_ = var("l", domain="positive")

theta = column_path([literal_function("theta")])
ys = literal_function("y")

expr = L_pend(m, l, g, ys)(Gamma(theta)(t)).simplify_full()
show(expr)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, l^{2} m \dot \theta^{2} + l m \sin\left(\theta\right) \dot \theta \dot y + g l m \cos\left(\theta\right) - g m y + \frac{1}{2} \, m \dot y^{2}
\end{dmath*}
#+end_export
