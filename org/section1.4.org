#+TITLE: Section 1.4
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section14 :eval never-export :exports code :results none :tangle ../sage/section1.4.sage :dir ../sage/

* Computing Actions


** Standard setup

I create an Org file for each separate section of the book; for this section it's ~section1.4.org~.
Code that is useful for later sections is tangled to ~utils1.4.sage~ and otherwise to ~section1.4.sage~.
This allows me to run the sage scripts on the prompt.
Note that the titles of the  code blocks correspond to the file to which the code is written when tangled.



#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
import numpy as np

load("functions.sage", "differentiation.sage", "tuples.sage")
#+end_src

BTW, don't do ~from sage.all import *~ because that will lead to name space conflicts, for instance with the ~Gamma~ function which we define below.


#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage
load("utils1.4.sage")

t = var("t", domain="real")
#+end_src

The next module is used for nice printing in org mode files; it should only be loaded in org mode files.
#+attr_latex: :options label=don't tangle
#+begin_src sage  :tangle no
load("show_expression.sage")
#+end_src


** The Lagrangian for a free particle.

The function ~L_free_particle~ takes ~mass~ as an argument and returns the (curried) function ~Lagrangian~ that takes a ~local~ tuple as an argument.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
def L_free_particle(mass):
    def Lagrangian(local):
        v = velocity(local)
        return 1 / 2 * mass * square(v)

    return Lagrangian
#+end_src

For the next step, we need a /literal functions/ and /coordinate paths/.

** Literal functions

A ~literal_function~ maps the time $t$ to a coordinate or velocity component of the path, for instance, $t \to x(t)$.
Since we need to perform arithmetic with literal functions, see below for some examples, we encapsulate it in a ~Function~.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
@Func
def literal_function(name):
    return lambda t: function(name)(t)
#+end_src

It's a function.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace :tangle no
x = literal_function("x")
print(x)
#+end_src

#+RESULTS:
: <__main__.Function object at 0x71122066e470>

Here are some operations on ~x~.

#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show(x(t))
show((x+x)(t))
show(square(x)(t))
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export

Note that, to keep the notation brief, the $t$ is suppressed in the LaTeX output.


** Paths

We will represent coordinate path functions $q$ and velocity path functions $v$ as functions that map time to vectors.
Thus, ~path_function~ returns a function of time, not yet a path.
We also need to perform arithmetic on paths, like $3 q$, therefore we encapsulate the path in a ~Function~.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
@Func
def path_function(lst):
    #return lambda t: vector([l(t) for l in lst])
    return lambda t: column_matrix([l(t) for l in lst])
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :tangle no
q = path_function(
    [
        literal_function("x"),
        literal_function("y"),
    ]
)
#+end_src


Here is an example to see how to use ~q~.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show(q(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
x \\
y
\end{array}\right]
\end{dmath*}
#+end_export


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show((q + q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
2 \, x \\
2 \, y
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show((2 * q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
2 \, x \\
2 \, y
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show((q * q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export

** Gamma function

The Gamma function lifts a coordinate path to a function that maps time to a local tuple of the form $(t, q(t), v(t), \ldots)$.
That is,
\begin{align*}
\Gamma[q](\cdot) &= (\cdot, q(\cdot), v(\cdot), \ldots), \\
\Gamma[q](t) &= (t, q(t), v(t), \ldots).
\end{align*}
To follow the conventions of the book, we use an ~up~ tuple for ~Gamma~.
However, I don't build the coordinate path nor the velocity as up tuples because I find Sagemath vectors more convenient.

$\Gamma$ just receives $q$ as an argument. Then it computes the velocity $v=Dq$, from which the acceleration follows recursively as $a=D v$, \ldots.
Recall that ~D~ computes the derivative (wrt time) of a function that depends on time.

When $n=3$, it returns a function of time that produces the first three elements of the local tuple $(t, q(t), v(t)$.
This is the default.
Once all derivatives are computed, we convert the result to a function that maps time to an up tuple.

# It turns out that in numerical work, a Sagemath ~vector~ or a ~matrix~ can be implicitly converted to a numpy array whose elements (interestingly) still may contain symbols.
# As a numpy array cannot be differentiated by Sagemath's tools, I cast a numpy array to a vector, so that it can be differentiated again if required.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
def Gamma(q, n=3):
    # if isinstance(q, np.ndarray):
    #     q = vector(q.tolist()) # todo, is this still needed?

    if n < 2:
        raise ValueError("n must be > 1")
    Dq = [q]
    for k in range(2, n):
        Dq.append(D(Dq[-1]))
    return lambda t: up(t, *[v(t) for v in Dq])
#+end_src


When applying ~Gamma~ to a path, we get this.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
local = Gamma(q)(t)
show(local)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} t \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
x \\
y
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
\dot x \\
\dot y
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export

We can include the acceleration too.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show(Gamma(q, 4)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} t \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
x \\
y
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
\dot x \\
\dot y
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
\ddot x \\
\ddot y
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export

todo: revise the definitions of time, coordiante, velocity, below.

Finally, here are some projections operators from the local tuple to supspaces.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
time = Function(lambda local: local[0])
coordinate = Function(lambda local: local[1])
velocity = Function(lambda local: local[2])
#+end_src

#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :tangle no
show(compose(velocity, Gamma(q))(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\dot x \\
\dot y
\end{array}\right]
\end{dmath*}
#+end_export


** Continuation with the free particle.

Now we know how to build literal functions and $\Gamma$, we can continue with the Lagrangian of the free particle.


#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage
q = path_function(
    [
        literal_function("x"),
        literal_function("y"),
        literal_function("z"),
    ]
)
#+end_src

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
show(q(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
x \\
y \\
z
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
show(D(q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\dot x \\
\dot y \\
\dot z
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
show(Gamma(q)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} t \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
x \\
y \\
z
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
\dot x \\
\dot y \\
\dot z
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export



The Lagrangian of a free particle with mass $m$ applied to the path ~Gamma~ gives this.
Our first implementation is like this: $L(\Gamma[q](t))$, that is, $\Gamma[q](t)$ makes a local tuple, and this is given as argument to $L$.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
load("functions.sage")
m = var('m', domain='positive')
show(L_free_particle(m)(Gamma(q)(t)))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, {\left(\dot x^{2} + \dot y^{2} + \dot z^{2}\right)} m
\end{dmath*}
#+end_export

Here is the implementation of the book: $(L\circ \Gamma[q])(t)$, that is, $L\circ \Gamma[q]$ is a function that depends on $t$.
Note how the brackets are placed after ~Gamma(q)~.

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
show(compose(L_free_particle(m), Gamma(q))(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, {\left(\dot x^{2} + \dot y^{2} + \dot z^{2}\right)} m
\end{dmath*}
#+end_export

We now compute the integral of Lagrangian ~L~ along the path ~q~, but for this we need a function to carry out 1D integration (along time in our case).
Of course, Sagemath already supports a definite integral in a library.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
from sage.symbolic.integration.integral import definite_integral
#+end_src

I don't like to read $d t$ at the end of the integral because $d t$ reads like the product of the variables $d$ and $t$.
Instead, I prefer to read $\d t$; for this reason I overwrite the LaTeX formatting of ~definite_integral~.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
def integral_latex_format(*args):
    expr, var, a, b = args
    return (
        fr"\int_{{{a}}}^{{{b}}} "
        + latex(expr)
        + r"\, \textrm{d}\,"
        + latex(var)
    )


definite_integral._print_latex_ = integral_latex_format
#+end_src


Here is the action along a generic path ~q~.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
T = var("T", domain="positive")

def Lagrangian_action(L, q, t1, t2):
    return definite_integral(compose(L, Gamma(q))(t), t, t1, t2)

show(Lagrangian_action(L_free_particle(m), q, 0, T))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, m {\left(\int_{0}^{T} \dot x^{2} \, \textrm{d}\, t + \int_{0}^{T} \dot y^{2} \, \textrm{d}\, t + \int_{0}^{T} \dot z^{2} \, \textrm{d}\, t\right)}
\end{dmath*}
#+end_export

To get a numerical answer, we take the test path of the book.
Below we'll do some arithmetic with ~test_path~; therefore we encapsulate it in a ~Function~.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
test_path = Function(lambda t: vector([4 * t + 7, 3 * t + 5, 2 * t + 1]))
show(Lagrangian_action(L_free_particle(mass=3), test_path, 0, 10))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
435
\end{dmath*}
#+end_export

Let's try a harder path. We don't need this later, so the encapsulation in ~Function~ is not necessary.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
hard_path = lambda t: vector([4 * t + 7, 3 * t + 5, 2 * exp(-t) + 1])

result = Lagrangian_action(L_free_particle(mass=3), hard_path, 0, 10)
show(result)
show(float(result))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
3 \, {\left(125 \, e^{20} - 1\right)} e^{\left(-20\right)} + 3
\end{dmath*}
\begin{dmath*}
377.9999999938165
\end{dmath*}
#+end_export

The value of the integral is different from $435$ because the end points of this harder path are not the same as the end points of the test path.

** Path of minimum action

First some experiments to see whether my code works as intended.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
@Func
def make_eta(nu, t1, t2):
    return lambda t: (t - t1) * (t - t2) * nu(t)


nu = Function(lambda t: vector([sin(t), cos(t), t ^ 2]))

show((1 / 3 * make_eta(nu, 3, 4)  + test_path)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\frac{1}{3} \, {\left(t - 3\right)} {\left(t - 4\right)} \sin + 4 \, t + 7,\,\frac{1}{3} \, {\left(t - 3\right)} {\left(t - 4\right)} \cos + 3 \, t + 5,\,\frac{1}{3} \, {\left(t - 3\right)} {\left(t - 4\right)} t^{2} + 2 \, t + 1\right)
\end{dmath*}
#+end_export

In the next code, I add the ~n()~ to force the result to a floating point number.
(Without this, the result is a long expression with lots of cosines and sines.)

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
def varied_free_particle_action(mass, q, nu, t1, t2):
    eta = make_eta(nu, t1, t2)

    def f(eps):
        return Lagrangian_action(L_free_particle(mass), q + eps * eta, t1, t2).n()

    return f

show(varied_free_particle_action(3.0, test_path, nu, 0.0, 10.0)(0.001))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
436.291214285714
\end{dmath*}
#+end_export

By comparing our result with that of the book, we see we are still on track.

Now use Sagemath's ~find_local_minimum~ to minimize over $\epsilon$.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
res = find_local_minimum(
    varied_free_particle_action(3.0, test_path, nu, 0.0, 10.0), -2.0, 1.0
)
show(res)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(435.000000000000, 0.0\right)
\end{dmath*}
#+end_export

We see that the optimal value for $\epsilon$ is $0$, and we retrieve our earlier value of the Lagrangian action.

** Finding minimal trajectories

The ~make_path~ function uses a Lagrangian polynomial to interpolate a given set of data.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
def Lagrangian_polynomial(ts, qs):
    return RR['x'].lagrange_polynomial(list(zip(ts, qs)))
#+end_src

While a Lagrangian polynomial gives an excellent fit on the fitted points, its behavior in between these points can be quite wild.
Let us test the quality of the fit before using this interpolation method.
From the book we know we need to fit $\cos(t)$ on $t \in [0, \pi/2]$, so let us try this first before trying to find the optimal path for the harmonic Lagrangian.
Since $\cos^{2} x + \sin^{2} x = 1$, we can use  this relation to check the quality of derivative of the fitted polynomial at the same time.
The result is better than I expected.

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
ts = np.linspace(0, pi / 2, 5)
qs = [cos(t).n() for t in ts]
lp = Lagrangian_polynomial(ts, qs)
ts = np.linspace(0, pi / 2, 20)
Cos = [lp(x=t).n() for t in ts]
Sin = [lp.derivative(x)(x=t).n() for t in ts]
Zero = [abs(Cos[i] ^ 2 + Sin[i] ^ 2 - 1) for i in range(len(ts))]
show(max(Zero))
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export

In the function ~make_path~ we use numpy's ~linspace~ instead of the linear interpolants of the book.
Note that  the coordinate paths above are column-vector functions, so ~make_path~ should return the same type.
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports code :results none
def make_path(t0, q0, t1, q1, qs):
    ts = np.linspace(t0, t1, len(qs) + 2)
    qs = np.r_[q0, qs, q1]
    return lambda t: vector([Lagrangian_polynomial(ts, qs)(t)])
#+end_src

Here is the harmonic Lagrangian.
#+attr_latex: :options label=../sage/utils1.4.sage
#+begin_src sage :tangle ../sage/utils1.4.sage
def L_harmonic(m, k):
    def Lagrangian(local):
        q = coordinate(local)
        v = velocity(local)
        return (1 / 2) * m * square(v) - (1 / 2) * k * square(q)

    return Lagrangian
#+end_src

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports code :results none
def parametric_path_action(Lagrangian, t0, q0, t1, q1):
    def f(qs):
        path = make_path(t0, q0, t1, q1, qs=qs)
        return Lagrangian_action(Lagrangian, path, t0, t1)

    return f
#+end_src

Let's try this on the path $\cos(t)$.
The intermediate values ~qs~ will be optimized below, whereas ~q0~ and ~q1~ remain fixed.
Thus, we strip the first and last element of ~linspace~ to make ~qs~.
The result tells us what we can expect for the minimal value for the integral over the Lagrangian along the optimal path.

#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results value
t0, t1 = 0, pi / 2
q0, q1 = cos(t0), cos(t1)
T = np.linspace(0, pi / 2, 5)
initial_qs = [cos(t).n() for t in T][1:-1]
parametric_path_action(L_harmonic(m=1, k=1), t0, q0, t1, q1)(initial_qs)
#+end_src

What is the quality of the path obtained by the Lagrangian interpolation?
(Recall that a path is a vector; to extract the value of the element that corresponds to the path, we need to write ~best_path(t=t)[0]~.)
#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports both :results replace latex
def find_path(Lagrangian, t0, q0, t1, q1, n):
    ts = np.linspace(t0, t1, n)
    initial_qs = np.linspace(q0, q1, n)[1:-1]
    minimizing_qs = minimize(
        parametric_path_action(Lagrangian, t0, q0, t1, q1),
        initial_qs,
    )
    return make_path(t0, q0, t1, q1, minimizing_qs)

best_path = find_path(L_harmonic(m=1, k=1), t0=0, q0=1, t1=pi / 2, q1=0, n=5)
result = [
    abs(best_path(t)[0].n() - cos(t).n()) for t in np.linspace(0, pi / 2, 10)
]
show(max(result))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
0.000172462354236957
\end{dmath*}
#+end_export

Great. All works!

Finally, here is a plot of the Lagrangian as a function of $q(t)$.


#+attr_latex: :options label=../sage/section1.4.sage
#+begin_src sage :exports code :results none :eval never
T = np.linspace(0, pi / 2, 20)
q = lambda t: vector([cos(t)])
lvalues = [L_harmonic(m=1, k=1)(Gamma(q)(t))(t=ti).n() for ti in T]
points = list(zip(ts, lvalues))
plot = list_plot(points, color="black", size=30)
plot.axes_labels(["$t$", "$L$"])
plot.save("../figures/Lagrangian.png", figsize=(4, 2))
#+end_src

#+CAPTION: The harmonic Lagrangian as a function of the optimal path $q(t)=\cos t$, $t \in [0, \pi/2]$.
#+NAME: fig:Lagrangian
#+ATTR_LATEX: :height 5cm :placement [h]
[[./../figures/Lagrangian.png]]
