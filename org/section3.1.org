#+TITLE: Section 3.1
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section31 :eval never-export :exports code :results none :tangle ../sage/section3.1.sage :dir ../sage



* Hamilton's Equations
** Standard imports


#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
load("utils1.6.sage")
#+end_src

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage
load("utils3.1.sage")

t = var("t", domain="real")
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src



** Computing Hamilton's equations

The code in Section 3.1 of the book starts with the following function.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
def Hamilton_equations(Hamiltonian):
    def f(q, p):
        state_path = qp_to_H_state_path(q, p)
        return D(state_path) - compose(
            Hamiltonian_to_state_derivative(Hamiltonian), state_path
        )

    return f
#+end_src

This needs the next function.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
def qp_to_H_state_path(q, p):
    def f(t):
        return up(t, q(t), p(t))

    return f
#+end_src

Here ~p~ is a function that maps $t$ to a momentum vector.
Such vectors are represented as lying vectors (or down tuples in the book).
To implement this, ~row_path~ takes a list and returns a function that maps time to the transpose of a column path.
In passing we define ~row_matrix~ as the transpose of ~column_matrix~, which is the function provided by Sagemath, and a ~transpose~ function.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
def transpose(M):
    return M.T


def row_path(lst):
    return lambda t: transpose(column_path(lst)(t))


def row_matrix(lst):
    return transpose(column_matrix(lst))
#+end_src

Let's try what we built.
#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage
q = column_path([literal_function("q_x"), literal_function("q_y")])
p = row_path([literal_function("p_x"), literal_function("p_y")])
#+end_src

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
show(p(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
p_{x} & p_{y}
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
H_state = qp_to_H_state_path(q, p)(t)
show(H_state)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} t \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
q_{x} \\
q_{y}
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{cc}
p_{x} & p_{y}
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export

The next function on which ~Hamiltonian_equations~ depends is ~Hamiltonian_to_state_derivative~.
The book prints the system of differential equations as a column vector.
Therefore we transpose $\partial_2 H$.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
def Hamiltonian_to_state_derivative(Hamiltonian):
    def f(H_state):
        return up(
            SR(1),
            partial(Hamiltonian, 2)(H_state).T,
            -partial(Hamiltonian, 1)(H_state),
        )

    return f
#+end_src

Here is an example with ~H_rectangular~.
For some reason, the book takes just the first and second component of ~q~, i.e.
~(req q 0)~ and ~(ref q 1)~, to pass to the potential, but the general formula works just as well.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
var("m")

def H_rectangular(m, V):
    def f(state):
        q, p = coordinate(state), momentum(state)
        return square(p) / 2 / m + V(q)

    return f
#+end_src

For this to work, we need a momentum projection operator. It's the same as the ~velocity~ projection.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
momentum = Function(lambda H_state: H_state[2])
#+end_src


Recall, to use symbolic functions in differentiation, the symbolic function requires an unpacked list of arguments.
#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage
V = Function(lambda x: function("V")(*x.list()))
#+end_src

This is the Hamiltonian.
#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
H = H_rectangular
show(H(m, V)(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{p_{x}^{2} + p_{y}^{2}}{2 \, m} + V\left(q_{x}, q_{y}\right)
\end{dmath*}
#+end_export

Partial derivatives work.
#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
show(partial(H(m, V), 1)(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc}
\mathrm{D}_{0}\left(V\right)\left(q_{x}, q_{y}\right) & \mathrm{D}_{1}\left(V\right)\left(q_{x}, q_{y}\right)
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
show(Hamiltonian_to_state_derivative(H(m, V))(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} 1 \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
\frac{p_{x}}{m} \\
\frac{p_{y}}{m}
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{cc}
-\mathrm{D}_{0}\left(V\right)\left(q_{x}, q_{y}\right) & -\mathrm{D}_{1}\left(V\right)\left(q_{x}, q_{y}\right)
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
show(Hamilton_equations(H(m, V))(q, p)(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} 0 \end{array} \\ \begin{array}{c} \left[\begin{array}{c}
-\frac{p_{x}}{m} + \dot q_{x} \\
-\frac{p_{y}}{m} + \dot q_{y}
\end{array}\right] \end{array} \\ \begin{array}{c} \left[\begin{array}{cc}
\mathrm{D}_{0}\left(V\right)\left(q_{x}, q_{y}\right) + \dot p_{x} & \mathrm{D}_{1}\left(V\right)\left(q_{x}, q_{y}\right) + \dot p_{y}
\end{array}\right] \end{array} \\ \end{array}
\end{dmath*}
#+end_export


** The Legendre Transformation

To understand the code of the book, observe the following.
\begin{align*}
F(v) &= 1/2 v^{T} M v + b^{t} v + c, \\
\partial_{v} F(v) &= M v + b, \\
\partial_{v} F(0) &= b, \\
\partial_{v}^{2} F(v) &= M.
\end{align*}
Clearly, $\partial_v F$ is the gradient, and $\partial_v^2 F$ is the Hessian. Observe that under the operation of the gradient, the vector $b$ changes shape: from $b^t$ to $b$.

In the code, the argument ~w~ corresponds to a moment, hence is a lying vector.
We need some dummy symbols with respect to which to differentiate, and then we set the dummy variables to 0 in the gradient and the Hessian.
For this second step, Sagemath uses substitution with a dictionary when multiple arguments are involved, which is the case here because $w$ is a vector.
So, by making a ~zeros~ dictionary that maps symbols to 0, we can use the keys of ~zeros~ as the dummy symbols, and then use ~zeros~ itself in the substitution.
Then, to solve for $v$ such that $Mv = w^t - b$, the lying vector $w$ has to be transposed.

#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
def Legendre_transform(F):
    def G(w):
        zeros = {var(f"v_{i}"): 0 for i in range(w.ncols())}
        b = gradient(F)(list(zeros.keys())).subs(zeros)
        M = Hessian(F)(list(zeros.keys())).subs(zeros)
        v = M.solve_right(w.T - b)
        return w * v - F(v)

    return G
#+end_src

Now we are equiped to convert a Lagrangian into a Hamiltonian.
#+attr_latex: :options label=../sage/utils3.1.sage
#+begin_src sage :tangle ../sage/utils3.1.sage
def Lagrangian_to_Hamiltonian(Lagrangian):
    def f(H_state):
        t = time(H_state)
        q = coordinate(H_state)
        p = momentum(H_state)

        def L(qdot):
            return Lagrangian(up(t, q, qdot))

        return Legendre_transform(L)(p)

    return f
#+end_src

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
res = Lagrangian_to_Hamiltonian(L_central_rectangular(m, V))(H_state)
show(res)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
-\frac{1}{2} \, m {\left(\frac{p_{x}^{2}}{m^{2}} + \frac{p_{y}^{2}}{m^{2}}\right)} + \frac{p_{x}^{2}}{m} + \frac{p_{y}^{2}}{m} + V\left(\sqrt{q_{x}^{2} + q_{y}^{2}}\right)
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
show(res.simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\frac{2 \, m V\left(\sqrt{q_{x}^{2} + q_{y}^{2}}\right) + p_{x}^{2} + p_{y}^{2}}{2 \, m}
\end{array}\right]
\end{dmath*}
#+end_export



#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage
var("m g l")
q = column_path([literal_function("theta")])
p = row_path([literal_function("p")])
#+end_src

Here is exercise 3.1.

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
# space = make_named_space(["\\theta"])
H_state = qp_to_H_state_path(q, p)(t)
show(Lagrangian_to_Hamiltonian(L_planar_pendulum(m, g, l))(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
-g l m {\left(\cos\left(\theta\right) - 1\right)} + \frac{p^{2}}{2 \, l^{2} m}
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
q = column_path([literal_function("q_x"), literal_function("q_y")])
p = row_path([literal_function("p_x"), literal_function("p_y")])
H_state = qp_to_H_state_path(q, p)(t)
show(Lagrangian_to_Hamiltonian(L_Henon_Heiles(m))(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
q_{x}^{2} q_{y} - \frac{1}{3} \, q_{y}^{3} + \frac{1}{2} \, p_{x}^{2} + \frac{1}{2} \, p_{y}^{2} + \frac{1}{2} \, q_{x}^{2} + \frac{1}{2} \, q_{y}^{2}
\end{array}\right]
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage
def L_sphere(m, R):
    def Lagrangian(local):
        theta, phi = coordinate(local).list()
        thetadot, phidot = velocity(local).list()
        return 1 / 2 * m * R ^ 2 * (
            square(thetadot) + square(phidot * sin(theta))
        )

    return Lagrangian


var("R", domain="positive")
#+end_src

#+attr_latex: :options label=../sage/section3.1.sage
#+begin_src sage :exports both :results replace latex
q = column_path([literal_function("theta"), literal_function("phi")])
p = row_path([literal_function("p_x"), literal_function("p_y")])
H_state = qp_to_H_state_path(q, p)(t)
show(Lagrangian_to_Hamiltonian(L_sphere(m, R))(H_state).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{c}
\frac{p_{x}^{2} \sin\left(\theta\right)^{2} + p_{y}^{2}}{2 \, R^{2} m \sin\left(\theta\right)^{2}}
\end{array}\right]
\end{dmath*}
#+end_export
