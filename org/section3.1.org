#+TITLE: Section 3.1
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section31 :eval never-export :exports code :results none :tangle sage/section3.1.sage

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  ; (setq org-latex-title-command (concat "\\chapter{%t}\n"))
#+end_src

* Hamilton's equations
** Standard imports


#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
load(
    "utils.sage",
    "utils1.6.sage",
)
#+end_src

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage
import numpy as np


load(
    "utils.sage",
    "utils1.5.sage",
    "utils1.6.sage",
    "utils3.1.sage",
)

var("t x y", domain="real")
#+end_src


#+ATTR_LATEX: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src



** Exercise 3.1

We will use the code below to solve Exercise 3.1.



** Computing Hamilton's equations

#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def Hamilton_equations(Hamiltonian):
    def f(q, p):
        state_path = qp_to_H_state_path(q, p)(t)
        return D(state_path) - Hamiltonian_to_state_derivative(Hamiltonian)(
            state_path
        )

    return f
#+end_src

#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def Hamiltonian_to_state_derivative(Hamiltonian):
    def f(H_state):
        return up(
            SR(1),
            vector(partial(Hamiltonian, 2)(H_state)),
            -vector(partial(Hamiltonian, 1)(H_state)),
        )

    return f
#+end_src

#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def qp_to_H_state_path(q, p):
    def f(t):
        return up(t, q(t=t), p(t=t))

    return f
#+end_src

#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def momentum(H_state):
    return H_state[2]
#+end_src

In the book, they use just the first and second component of ~q~ to pass on to the potential.
I don't see why, so I keep it general.
#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def H_rectangular(m, V):
    def f(state):
        q, p = coordinate(state), velocity(state)
        return square(p) / 2 / m + V(q)

    return f
#+end_src


I discovered that if I use the same name for a python function (here ~V~) as the symbolic function (here ~U~), I get errors.
Therefore I use ~U~ instead of ~V~ in ~function("U")~.
Recall, to use symbolic functions in differentiation, the symbolic function want the argument list unpacked.
#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage
def V(q):
    return function("U")(*q)
#+end_src

Let's try what we built.
#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage
var("m")
q = vector([literal_function("q_x"), literal_function("q_y")])
p = vector([literal_function("p_x"), literal_function("p_y")])
#+end_src


#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
H_state = qp_to_H_state_path(q, p)(t)
show(H_state)
#+end_src

#+RESULTS:
#+begin_export latex
\[ \text{\texttt{up(t,{ }(q{\char`\_}x(t),{ }q{\char`\_}y(t)),{ }(p{\char`\_}x(t),{ }p{\char`\_}y(t)))}} \]
#+end_export


#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
H = H_rectangular
show(H(m, V)(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\[ \frac{p_x^{2} + p_y^{2}}{2 \, m} + U\left(q_x, q_y\right) \]
#+end_export

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
show(partial(H(m, V), 1)(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\[ \left(\begin{array}{rr}
\mathrm{D}_{0}\left(U\right)\left(q_x, q_y\right) & \mathrm{D}_{1}\left(U\right)\left(q_x, q_y\right)
\end{array}\right) \]
#+end_export

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
show_tuple(Hamiltonian_to_state_derivative(H(m, V))(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{align*} & 1 \\ & \left(\frac{p_x}{m},\,\frac{p_y}{m}\right) \\ & \left(-\mathrm{D}_{0}\left(U\right)\left(q_x, q_y\right),\,-\mathrm{D}_{1}\left(U\right)\left(q_x, q_y\right)\right) \\ \end{align*}
#+end_export

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
show_tuple(Hamilton_equations(H(m, V))(q, p))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{align*} & 0 \\ & \left(-\frac{p_x}{m} + \frac{\partial}{\partial t}q_x,\,-\frac{p_y}{m} + \frac{\partial}{\partial t}q_y\right) \\ & \left(\mathrm{D}_{0}\left(U\right)\left(q_x, q_y\right) + \frac{\partial}{\partial t}p_x,\,\mathrm{D}_{1}\left(U\right)\left(q_x, q_y\right) + \frac{\partial}{\partial t}p_y\right) \\ \end{align*}
#+end_export

* The Legendre Transformation

To understand the code of the book, observe the following.
When $F(v) = 1/2 v^{T} M v + b^{T} v + c$, then $\partial_{v} F = M v + b$, and so $\partial_{v}F(v=0) = b$, because $M 0=0$.
Likewise, if $F$ has orders of $v$ higher than $2$, then $\partial_v^{2} F(v=0) = M$.
In code, $\partial_{v} F(v=0)$ is ~gradient(F, zero)~.
Note further that---at least for the examples we consider---the argument ~w~ corresponds to a moment, and ~zero~ is a velocity vector with the same dimension of ~w~.

#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def Legendre_transform(F):
    def G(w):
        zero = [0] * len(w)
        b = gradient(F, zero)
        M = hessian(F, zero)
        v = M.solve_left(w - b)
        return w * v - F(v)

    return G
#+end_src

#+ATTR_LATEX: :options label=utils3.1.sage
#+begin_src sage :tangle sage/utils3.1.sage
def Lagrangian_to_Hamiltonian(Lagrangian):
    def f(H_state):
        t = time(H_state)
        q = coordinate(H_state)
        p = momentum(H_state)

        def L(qdot):
            return Lagrangian(up(t, q, qdot))

        return Legendre_transform(L)(p)

    return f
#+end_src

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
res = Lagrangian_to_Hamiltonian(L_central_rectangular(m, V))(H_state)
show(res)
#+end_src

#+RESULTS:
#+begin_export latex
\[ -\frac{1}{2} \, m {\left(\frac{p_x^{2}}{m^{2}} + \frac{p_y^{2}}{m^{2}}\right)} + \frac{p_x^{2}}{m} + \frac{p_y^{2}}{m} + U\left(q_x, q_y\right) \]
#+end_export

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
show(res.simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\[ \frac{2 \, m U\left(q_x, q_y\right) + p_x^{2} + p_y^{2}}{2 \, m} \]
#+end_export


#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage
var("m g l")
q = vector([literal_function("q_x")])
p = vector([literal_function("p_x")])
#+end_src

Here is exercise 3.1.

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
# space = make_named_space(["\\theta"])
H_state = qp_to_H_state_path(q, p)(t)
show(Lagrangian_to_Hamiltonian(L_planar_pendulum(m, g, l))(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\[ -g l m {\left(\cos\left(q_x\right) - 1\right)} + \frac{p_x^{2}}{2 \, l^{2} m} \]
#+end_export

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
q = vector([literal_function("q_x"), literal_function("q_y")])
p = vector([literal_function("p_x"), literal_function("p_y")])
H_state = qp_to_H_state_path(q, p)(t)
show(Lagrangian_to_Hamiltonian(L_Henon_Heiles(m))(H_state))
#+end_src

#+RESULTS:
#+begin_export latex
\[ q_x^{2} q_y - \frac{1}{3} \, q_y^{3} + \frac{1}{2} \, p_x^{2} + \frac{1}{2} \, p_y^{2} + \frac{1}{2} \, q_x^{2} + \frac{1}{2} \, q_y^{2} \]
#+end_export

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage
def L_sphere(m, R):
    def Lagrangian(local):
        theta, phi = coordinate(local)
        thetadot, phidot = velocity(local)
        return 1 / 2 * m * R ^ 2 * (
            square(thetadot) + square(phidot * sin(theta))
        )

    return Lagrangian


var("R")
#+end_src

#+ATTR_LATEX: :options label=section3.1.sage
#+begin_src sage :exports both :results replace latex
space = make_named_space(["\\theta", "\\phi"])
show(Lagrangian_to_Hamiltonian(L_sphere(m, R))(H_state).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\[ \frac{p_x^{2} \sin\left(q_x\right)^{2} + p_y^{2}}{2 \, R^{2} m \sin\left(q_x\right)^{2}} \]
#+end_export
