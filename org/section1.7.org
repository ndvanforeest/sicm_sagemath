#+TITLE: Section 1.7
#+AUTHOR: Nicky
#+date: <2025-05-09 Fri>

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section17 :eval never-export :exports code :results none :tangle ../sage/section1.7.sage :dir ../sage


* Evolution of Dynamical State


** Standard imports

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
load("utils1.6.sage")
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage
load("utils1.7.sage")

var("t", domain=RR)
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src

** Acceleration and state derivative

We build the functions ~Lagrangian_to_acceleration~ and ~Lagrangian_to_state_derivative~ in steps.


#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
q = path_function([literal_function("x"), literal_function("y")])
local = Gamma(q)(t)
m, k = var("m k", domain="positive")
L = L_harmonic(m, k)
show(L(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
-\frac{1}{2} \, {\left(x^{2} + y^{2}\right)} k + \frac{1}{2} \, {\left(\dot x^{2} + \dot y^{2}\right)} m
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
F = compose(transpose, partial(L, 1))
show(F(local))
P = partial(L, 2)
show((F - partial(P, 0))(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\begin{array}{r}
-k x \\
-k y
\end{array}\right)
\end{dmath*}
\begin{dmath*}
\left(\begin{array}{r}
-k x \\
-k y
\end{array}\right)
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
show((partial(P, 1) * velocity)(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\begin{array}{r}
0 \\
0
\end{array}\right)
\end{dmath*}
#+end_export

Convert to vector.
#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
show((F - partial(P, 0) - partial(P, 1) * velocity)(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\begin{array}{r}
-k x \\
-k y
\end{array}\right)
\end{dmath*}
#+end_export


#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def Lagrangian_to_acceleration(L):
    def f(local):
        P = partial(L, 2)
        F = compose(transpose, partial(L, 1))
        M = (F - partial(P, 0)) - partial(P, 1) * velocity
        return partial(P, 2)(local).solve_right(M(local))

    return f
#+end_src

We apply this to the harmonic oscillator.

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
show(Lagrangian_to_acceleration(L)(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\begin{array}{r}
-\frac{k x}{m} \\
-\frac{k y}{m}
\end{array}\right)
\end{dmath*}
#+end_export


** Intermezzo, numerically integrating ODEs with Sagemath

At a later stage, we want to numerically integrate the system of ODEs that result from the Lagrangian.
This works a bit different from what I expected; here are two examples to see the problem.

Consider the system of DEs for the circle: $\dot x = y$, $\dot y = -x$. This code implements the rhs:
#+attr_latex: :options label=don't tangle
#+begin_src sage :tangle no
def de_rhs(x, y):
    return [y, -x]


sol = desolve_odeint(de_rhs(x, y), [1, 0], srange(0, 100, 0.05), [x, y])
pp = list(zip(sol[:, 0], sol[:, 1]))
p = points(pp, color='blue', size=3)
p.save(f'circle.png')
#+end_src

However, if I replace the rhs of the DE by by constants,, I get an error that the integration variables are unknown.

#+attr_latex: :options label=don't tangle
#+begin_src sage :tangle no
def de_rhs(x, y):
    return [1, -1]
#+end_src

The solution is to replace the numbers by expressions.
#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def convert_to_expr(n):
    return SR(n)
#+end_src

And then define the function of differentials like this.
#+attr_latex: :options label=don't tangle
#+begin_src sage :tangle no
def de_rhs(x, y):
    return [convert_to_expr(1), convert_to_expr(-1)]
#+end_src

Now things work as they should.

** Continuing with the oscillator

The next function computes the state derivative of the Lagrangian.
For the purpose of numerical integration, we cast the result of the derivative of $\d t/\d t = 1$ to an expression, more specifically, by the above intermezzo we should set the derivative of $t$ to ~convert_to_expr(1)~.

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def Lagrangian_to_state_derivative(L):
    acceleration = Lagrangian_to_acceleration(L)
    return lambda state: up(
        convert_to_expr(1), velocity(state), acceleration(state)
    )
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
show(Lagrangian_to_state_derivative(L)(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} 1 \end{array} \\ \begin{array}{c} \left(\begin{array}{r}
\dot x \\
\dot y
\end{array}\right) \end{array} \\ \begin{array}{c} \left(\begin{array}{r}
-\frac{k x}{m} \\
-\frac{k y}{m}
\end{array}\right) \end{array} \\ \end{array}
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage
def harmonic_state_derivative(m, k):
    return Lagrangian_to_state_derivative(L_harmonic(m, k))
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
show(harmonic_state_derivative(m, k)(local))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} 1 \end{array} \\ \begin{array}{c} \left(\begin{array}{r}
\dot x \\
\dot y
\end{array}\right) \end{array} \\ \begin{array}{c} \left(\begin{array}{r}
-\frac{k x}{m} \\
-\frac{k y}{m}
\end{array}\right) \end{array} \\ \end{array}
\end{dmath*}
#+end_export


#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def qv_to_state_path(q, v):
    return lambda t: up(t, q(t), v(t))
#+end_src

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def Lagrange_equations_first_order(L):
    def f(q, v):
        state_path = qv_to_state_path(q, v)
        res = D(state_path)
        res -= compose(Lagrangian_to_state_derivative(L), state_path)
        return res

    return f
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
res = Lagrange_equations_first_order(L_harmonic(m, k))(
    path_function([literal_function("x"), literal_function("y")]),
    path_function([literal_function("v_x"), literal_function("v_y")]),
)
show(res(t))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\begin{array}{c}\begin{array}{c} 0 \end{array} \\ \begin{array}{c} \left(\begin{array}{r}
-v_{x} + \dot x \\
-v_{y} + \dot y
\end{array}\right) \end{array} \\ \begin{array}{c} \left(\begin{array}{r}
\frac{k x}{m} + \dot v_{x} \\
\frac{k y}{m} + \dot v_{y}
\end{array}\right) \end{array} \\ \end{array}
\end{dmath*}
#+end_export

** Numerical integration


For the numerical integrator we have to specify the variables that appear in the differential equations.
For this purpose we use dummy vectors.
#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def make_dummy_vector(name, dim):
    return column_matrix([var(f"{name}{i}", domain=RR) for i in range(dim)])
#+end_src

The ~state_advancer~ needs an ~evolve~ function.
We use the initial conditions ~ics~ to figure out the dimension of the coordinate space.
Once we have the dimension, we construct a dummy up tuple with coordinate and velocity variables.
The ode solver need plain lists; since ~space~ is an up tuple, the ~list~ method of ~Tuple~ can provide for this.

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def evolve(state_derivative, ics, times):
    dim = coordinate(ics).nrows()
    coordinates = make_dummy_vector("q", dim)
    velocities = make_dummy_vector("v", dim)
    space = up(t, coordinates, velocities)
    soln = desolve_odeint(
        des=state_derivative(space).list(),
        ics=ics.list(),
        times=times,
        dvars=space.list(),
        atol=1e-13,
    )
    return soln
#+end_src

The state advancer integrates the orbit for a time ~T~ and starting at the initial conditions.
#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def state_advancer(state_derivative, ics, T):
    init_time = time(ics)
    times = [init_time, init_time + T]
    soln = evolve(state_derivative, ics, times)
    return soln[-1]
#+end_src

As a test, let's apply it to the one D harmonic oscillator.
#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
state_advancer(
    harmonic_state_derivative(m=2, k=1),
    ics=up(0, column_matrix([1, 2]), column_matrix([3, 4])),
    T=10,
)
#+end_src

#+RESULTS:
#+begin_export latex
array([10.        ,  3.71279102,  5.42061989,  1.61480284,  1.8189101 ])
#+end_export

These are (nearly) the same results as in the book.

** The driven pendulum

Here is the driver for the pendulum.

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def periodic_drive(amplitude, frequency, phase):
    def f(t):
        return amplitude * cos(frequency * t + phase)

    return f
#+end_src

With this we make the Lagrangian.

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
_ = var("m l g A omega")


def L_periodically_driven_pendulum(m, l, g, A, omega):
    ys = periodic_drive(A, omega, 0)

    def Lagrangian(local):
        return L_pend(m, l, g, ys)(local)

    return Lagrangian
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
q = path_function([literal_function("theta")])
show(
    L_periodically_driven_pendulum(m, l, g, A, omega)(
        Gamma(q)(t)
    ).simplify_full()
)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\frac{1}{2} \, A^{2} m \omega^{2} \sin\left(\omega t\right)^{2} - A l m \omega \sin\left(\omega t\right) \sin\left(\theta\right) \dot \theta + \frac{1}{2} \, l^{2} m \dot \theta^{2} - A g m \cos\left(\omega t\right) + g l m \cos\left(\theta\right)
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
expr = Lagrange_equations(L_periodically_driven_pendulum(m, l, g, A, omega))(
    q
)(t).simplify_full()
show(expr)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\begin{array}{r}
l^{2} m \ddot \theta - {\left(A l m \omega^{2} \cos\left(\omega t\right) - g l m\right)} \sin\left(\theta\right)
\end{array}\right)
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
show(
    Lagrangian_to_acceleration(
        L_periodically_driven_pendulum(m, l, g, A, omega)
    )(Gamma(q)(t)).simplify_full()
)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(\begin{array}{r}
\frac{{\left(A \omega^{2} \cos\left(\omega t\right) - g\right)} \sin\left(\theta\right)}{l}
\end{array}\right)
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage
def pend_state_derivative(m, l, g, A, omega):
    return Lagrangian_to_state_derivative(
        L_periodically_driven_pendulum(m, l, g, A, omega)
    )
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :exports both :results replace latex
expr = pend_state_derivative(m, l, g, A, omega)(Gamma(q)(t))
show(time(expr))
show(coordinate(expr).simplify_full())
show(velocity(expr).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
1
\end{dmath*}
\begin{dmath*}
\left(\begin{array}{r}
\dot \theta
\end{array}\right)
\end{dmath*}
\begin{dmath*}
\left(\begin{array}{r}
\frac{{\left(A \omega^{2} \cos\left(\omega t\right) - g\right)} \sin\left(\theta\right)}{l}
\end{array}\right)
\end{dmath*}
#+end_export

#+attr_latex: :options label=../sage/utils1.7.sage
#+begin_src sage :tangle ../sage/utils1.7.sage
def principal_value(cut_point):
    def f(x):
        return (x + cut_point) % (2 * np.pi) - cut_point

    return f
#+end_src

#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage :eval nil
def plot_driven_pendulum(A, T, step_size=0.01):
    times = srange(0, T, step_size, include_endpoint=True)
    soln = evolve(
        pend_state_derivative(m=1, l=1, g=9.8, A=A, omega=2 * sqrt(9.8)),
        ics=up(0, column_matrix([1]), column_matrix([0])),
        times=times,
    )
    thetas = soln[:, 1]
    pp = list(zip(times, thetas))
    p = points(pp, color='blue', size=3)
    p.save(f'../figures/driven_pendulum_{A:.2f}.png')

    thetas = principal_value(np.pi)(thetas)
    pp = list(zip(times, thetas))
    p = points(pp, color='blue', size=3)
    p.save(f'../figures/driven_pendulum_{A:.2f}_principal_value.png')

    thetadots = soln[:, 2]
    pp = list(zip(thetas, thetadots))
    p = points(pp, color='blue', size=3)
    p.save(f'../figures/driven_pendulum_{A:.2f}_trajectory.png')

#+end_src

So now we make the plot.
#+attr_latex: :options label=../sage/section1.7.sage
#+begin_src sage
plot_driven_pendulum(A=0.1, T=100, step_size=0.005)
#+end_src

#+CAPTION: The angle of the vertically driven pendulum as a function of time. Obviously, around $t=80$, the pendulum makes a few revolutions, and then starts to wobble again.
#+NAME: fig:driven-pendulum
#+ATTR_LATEX: :height 5cm :width 15cm :placement [h]
[[./../figures/driven_pendulum_0.10.png]]

#+CAPTION: The angle on $(-\pi, \pi]$.
#+NAME: fig:driven-pendulum-principal_value
#+ATTR_LATEX: :height 5cm :width 15cm :placement [h]
[[./../figures/driven_pendulum_0.10_principal_value.png]]


#+CAPTION: The trajectory of $\theta$ and $\dot \theta$.
#+NAME: fig:driven-pendulum-trajectory
#+ATTR_LATEX: :height 5cm :width 15cm :placement [h]
[[./../figures/driven_pendulum_0.10_trajectory.png]]
