#+TITLE: Section 5.2
#+AUTHOR: Nicky

#+OPTIONS: toc:nil author:nil date:nil title:t

#+LATEX_CLASS: subfiles
#+LATEX_CLASS_OPTIONS: [sicm_sagemath]

#+PROPERTY: header-args:sage :session section52 :eval never-export :exports code :results none :tangle ../sage/section5.2.sage :dir ../sage

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  ; (setq org-latex-title-command (concat "\\chapter{%t}\n"))
#+end_src


* General Canonical Transformations

I found the analysis in the first part of Section 5.2 somewhat strange: why do all this coding when it turns out that it's easiest to express the canonical condition in terms of a matrix equation? I therefore skip this first part, and move to symplectic matrices straightaway.



** The standard imports.

#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
load("utils5.1.sage")
#+end_src

#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage
load("utils5.2.sage")

t = var("t", domain="real")
#+end_src


#+attr_latex: :options label=don't tangle
#+begin_src sage :exports code  :tangle no
load("show_expression.sage")
#+end_src


** Symplectic matrices


We start with building the symplectic unit.
#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
def symplectic_unit(n):
    I = identity_matrix(n)
    return block_matrix([[zero_matrix(n), I], [-I, zero_matrix(n)]])
#+end_src

#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
show(symplectic_unit(2))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left[\begin{array}{cc|cc}
0 & 0 & 1 & 0 \\
0 & 0 & 0 & 1 \\
\hline
 -1 & 0 & 0 & 0 \\
0 & -1 & 0 & 0
\end{array}\right]
\end{dmath*}
#+end_export

Now we make the test on whether a matrix is symplectic or not.
Two remarks:
1. Sometimes Sagemath seems to miss that $\sqrt{x}/\sqrt{x} = 1$, even after adding the assumption that $x$ is positive. This turned out to be problematic when running this test on examples below. It turned out that expanding the matrix $M$ resolved this type of problem.
2. I like to see the output in case the transformation is not symplectic, hence the print statement at the end.
#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage

def is_symplectic_matrix(M):
    n = M.nrows()
    J = symplectic_unit(n // 2)
    if isinstance(M, sage.matrix.matrix_symbolic_dense.Matrix_symbolic_dense):
        M = M.expand()
        res = (M * J * M.transpose()).simplify_full()
    else:
        res = M * J * M.transpose()
    if res == J:
        return True
    print(res - J)
    return False
#+end_src

We can test this code on a symplectic unit $J$.
Let's fill in $J=A$ in the relation $J = A J A^{T}$.
This then becomes $J J J^{T} = J J J^{-1} = J$, since $J^{-1} = J^{T}$. We conclude that $J$ is a symplectic matrix itself.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
J = symplectic_unit(2)
show(is_symplectic_matrix(J))
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export

The next important function is the test on whether a transformation is symplectic, which depends on a few other functions that we will build below.
#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
def is_symplectic_transform(C):
    return lambda state: compose(
        is_symplectic_matrix, qp_submatrix, D_as_matrix(C)
    )(state)
#+end_src

The function ~qp_submatrix~ is easy.
#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
def qp_submatrix(M):
    return M[1:, 1:]
#+end_src

The function ~D_as_matrix~ requires some more work.
It takes a phase-space transformation $C$ as argument, that is, a map from $\text{up}(t, q', p')$ to $\text{up}(t, q, p)$, and returns a function that operates on the state $\text{up}(t, q', p')$ to produce the derivativ $D C$ in matrix form.
Thus, we need a function to convert tuples to vectors, and another function that lets $C$ operate on vectors instead of tuples.
Once we have this, we can apply Sagemath's ~jacobian~ to compute the derivative of the functions ~vmap(vec)~ with respect to the vectorized up-tuple ~state~.

#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
def D_as_matrix(C):
    def f(state):
        vec = up_to_vector(state)
        vmap = to_vector_map(C)
        #return jacobian(vmap(vec), vec).simplify_full()
        return jacobian(vmap(state), vec).simplify_full()

    return f
#+end_src

In Sagemath we work with matrices and vectors instead of up and down tuples.
Note that we give up on whether coordinates and momenta are standing or lying vectors.
Everything becomes just a vector.
This is of course a consequence of the use of symplectic matrices.
#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
def up_to_vector(state):
    return vector(
        [time(state), *coordinate(state).list(), *momentum(state).list()]
    )
#+end_src


Here is a test.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage
var("r, phi, p_r, p_phi", domain="real")
assume(r > 0)

r_phi = up(t, column_matrix([r, phi]), row_matrix([p_r, p_phi]))
#+end_src

The functions should be each others inverse.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
vec = up_to_vector(r_phi)
show(vec)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(t,\,r,\,\phi,\,p_{r},\,p_{\phi}\right)
\end{dmath*}
#+end_export

Point transformations can be used as canonical transformations.
So this case forms a more serious test.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
show(up_to_vector(F_to_CH(p_to_r)(r_phi)).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(t,\,r \cos\left(\phi\right),\,r \sin\left(\phi\right),\,\frac{p_{r} r \cos\left(\phi\right) - p_{\phi} \sin\left(\phi\right)}{r},\,\frac{p_{r} r \sin\left(\phi\right) + p_{\phi} \cos\left(\phi\right)}{r}\right)
\end{dmath*}
#+end_export

The other function is ~to_vector_map(C)~.
#+attr_latex: :options label=../sage/utils5.2.sage
#+begin_src sage :tangle ../sage/utils5.2.sage
def to_vector_map(C):
    return compose(up_to_vector, C)
#+end_src

#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
show(to_vector_map(F_to_CH(p_to_r))(r_phi).simplify_full())
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\left(t,\,r \cos\left(\phi\right),\,r \sin\left(\phi\right),\,\frac{p_{r} r \cos\left(\phi\right) - p_{\phi} \sin\left(\phi\right)}{r},\,\frac{p_{r} r \sin\left(\phi\right) + p_{\phi} \cos\left(\phi\right)}{r}\right)
\end{dmath*}
#+end_export

We can test whether the transformation to polar coordinates is canonical.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
show(is_symplectic_transform(F_to_CH(p_to_r))(r_phi))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\mathrm{True}
\end{dmath*}
#+end_export

This is a test for a general 2D point transformation.
It took me a bit of time to see how to translate the next Scheme code.
#+BEGIN_SRC text :tangle no
(define (F s)
  ((literal-function 'F
    (-> (X Real (UP Real Real)) (UP Real Real))
    (time s)
    (coordinates s)))
#+END_SRC
In Sagemath this becomes:
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage
def F(local):
    t, q = time(local), coordinate(local)
    return vector([function("f")(t, *q), function("g")(t, *q)])
#+end_src

The next check takes some time to complete.
#+attr_latex: :options label=don't tangle
#+begin_src sage :exports both :results replace latex :eval never :tangle no
_ = var("y p_x p_y", domain="real")
xy = up(t, vector([x, y]), vector([p_x, p_y]))

show(is_symplectic_transform(F_to_CH(F))(xy))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\mathrm{True}
\end{dmath*}
#+end_export

We can do some tests on earlier examples.
Formally we know already the answer, but why use them to test our code (and our understanding)?

This one tests the polar-canonical transformation. BTW, this example reported false when the matrix ~M~ in ~is_symplectic_matrix~ was not expanded.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
def polar_canonical(alpha):
    def f(state):
        t = time(state)
        theta = coordinate(state)[0]
        I = momentum(state)[0]
        x = sqrt(2 * I / alpha) * sin(theta)
        p = sqrt(2 * I * alpha) * cos(theta)
        return up(t, vector([x]), vector([p]))

    return f


_ = var("theta", domain="real")
_ = var("I alpha", domain="positive")
theta_I = up(t, vector([theta]), vector([I]))
show(is_symplectic_transform(polar_canonical(alpha))(theta_I))
#+end_src

#+RESULTS:
#+begin_export latex
\begin{dmath*}
\mathrm{True}
\end{dmath*}
#+end_export

This is a /non/-canonical transformation.
#+attr_latex: :options label=../sage/section5.2.sage
#+begin_src sage :exports both :results replace latex
def a_non_canonical_transform(state):
    t = time(state)
    theta = coordinate(state)[0]
    I = momentum(state)[0]
    x = I * sin(theta)
    p = I * cos(theta)
    return up(t, vector([x]), vector([p]))


show(is_symplectic_transform(a_non_canonical_transform)(theta_I))
#+end_src

#+RESULTS:
#+begin_export latex
[     0  I - 1]
[-I + 1      0]
\begin{dmath*}
\mathrm{False}
\end{dmath*}
#+end_export
